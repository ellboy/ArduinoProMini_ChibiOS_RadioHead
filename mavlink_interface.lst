   1               		.file	"mavlink_interface.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               		.section	.text.crc_accumulate,"ax",@progbits
  12               	crc_accumulate:
  13               	.LFB53:
  14               		.file 1 "./mavlink/common/../checksum.h"
   1:./mavlink/common/../checksum.h **** #ifdef __cplusplus
   2:./mavlink/common/../checksum.h **** extern "C" {
   3:./mavlink/common/../checksum.h **** #endif
   4:./mavlink/common/../checksum.h **** 
   5:./mavlink/common/../checksum.h **** #ifndef _CHECKSUM_H_
   6:./mavlink/common/../checksum.h **** #define _CHECKSUM_H_
   7:./mavlink/common/../checksum.h **** 
   8:./mavlink/common/../checksum.h **** 
   9:./mavlink/common/../checksum.h **** /**
  10:./mavlink/common/../checksum.h ****  *
  11:./mavlink/common/../checksum.h ****  *  CALCULATE THE CHECKSUM
  12:./mavlink/common/../checksum.h ****  *
  13:./mavlink/common/../checksum.h ****  */
  14:./mavlink/common/../checksum.h **** 
  15:./mavlink/common/../checksum.h **** #define X25_INIT_CRC 0xffff
  16:./mavlink/common/../checksum.h **** #define X25_VALIDATE_CRC 0xf0b8
  17:./mavlink/common/../checksum.h **** 
  18:./mavlink/common/../checksum.h **** #ifndef HAVE_CRC_ACCUMULATE
  19:./mavlink/common/../checksum.h **** /**
  20:./mavlink/common/../checksum.h ****  * @brief Accumulate the X.25 CRC by adding one char at a time.
  21:./mavlink/common/../checksum.h ****  *
  22:./mavlink/common/../checksum.h ****  * The checksum function adds the hash of one char at a time to the
  23:./mavlink/common/../checksum.h ****  * 16 bit checksum (uint16_t).
  24:./mavlink/common/../checksum.h ****  *
  25:./mavlink/common/../checksum.h ****  * @param data new char to hash
  26:./mavlink/common/../checksum.h ****  * @param crcAccum the already accumulated checksum
  27:./mavlink/common/../checksum.h ****  **/
  28:./mavlink/common/../checksum.h **** static inline void crc_accumulate(uint8_t data, uint16_t *crcAccum)
  29:./mavlink/common/../checksum.h **** {
  15               		.loc 1 29 0
  16               		.cfi_startproc
  17               	.LVL0:
  18               	/* prologue: function */
  19               	/* frame size = 0 */
  20               	/* stack size = 0 */
  21               	.L__stack_usage = 0
  22 0000 FB01      		movw r30,r22
  30:./mavlink/common/../checksum.h ****         /*Accumulate one byte of data into the CRC*/
  31:./mavlink/common/../checksum.h ****         uint8_t tmp;
  32:./mavlink/common/../checksum.h **** 
  33:./mavlink/common/../checksum.h ****         tmp = data ^ (uint8_t)(*crcAccum &0xff);
  23               		.loc 1 33 0
  24 0002 2081      		ld r18,Z
  25 0004 8227      		eor r24,r18
  26               	.LVL1:
  34:./mavlink/common/../checksum.h ****         tmp ^= (tmp<<4);
  27               		.loc 1 34 0
  28 0006 90E1      		ldi r25,lo8(16)
  29 0008 899F      		mul r24,r25
  30 000a 9001      		movw r18,r0
  31 000c 1124      		clr __zero_reg__
  32 000e 8227      		eor r24,r18
  33               	.LVL2:
  35:./mavlink/common/../checksum.h ****         *crcAccum = (*crcAccum>>8) ^ (tmp<<8) ^ (tmp <<3) ^ (tmp>>4);
  34               		.loc 1 35 0
  35 0010 282F      		mov r18,r24
  36 0012 30E0      		ldi r19,0
  37 0014 8295      		swap r24
  38               	.LVL3:
  39 0016 8F70      		andi r24,lo8(15)
  40 0018 4181      		ldd r20,Z+1
  41 001a 50E0      		ldi r21,0
  42 001c 4827      		eor r20,r24
  43 001e 922F      		mov r25,r18
  44 0020 8827      		clr r24
  45 0022 4827      		eor r20,r24
  46 0024 5927      		eor r21,r25
  47 0026 93E0      		ldi r25,3
  48               		1:
  49 0028 220F      		lsl r18
  50 002a 331F      		rol r19
  51 002c 9A95      		dec r25
  52 002e 01F4      		brne 1b
  53               	.LVL4:
  54 0030 2427      		eor r18,r20
  55 0032 3527      		eor r19,r21
  56 0034 3183      		std Z+1,r19
  57 0036 2083      		st Z,r18
  58 0038 0895      		ret
  59               		.cfi_endproc
  60               	.LFE53:
  62               		.section	.text.print_raw,"ax",@progbits
  63               	.global	print_raw
  65               	print_raw:
  66               	.LFB1420:
  67               		.file 2 "mavlink_interface.c"
   1:mavlink_interface.c **** /*
   2:mavlink_interface.c ****  * mavlink.c
   3:mavlink_interface.c ****  *
   4:mavlink_interface.c ****  *  Created on: 18.10.2016
   5:mavlink_interface.c ****  *      Author: ellboy
   6:mavlink_interface.c ****  */
   7:mavlink_interface.c **** 
   8:mavlink_interface.c **** #include "mavlink_interface.h"
   9:mavlink_interface.c **** 
  10:mavlink_interface.c **** #include "RHReliableDatagram_wrapper.h"
  11:mavlink_interface.c **** 
  12:mavlink_interface.c **** #include <debug.h>
  13:mavlink_interface.c **** 
  14:mavlink_interface.c **** mavlink_system_t mavlink_system;
  15:mavlink_interface.c **** 
  16:mavlink_interface.c **** // Define the system type, in this case an airplane
  17:mavlink_interface.c **** uint8_t system_type = MAV_TYPE_COAXIAL;
  18:mavlink_interface.c **** uint8_t autopilot_type = MAV_AUTOPILOT_GENERIC;
  19:mavlink_interface.c **** 
  20:mavlink_interface.c **** uint8_t system_mode = MAV_MODE_PREFLIGHT; ///< Booting up
  21:mavlink_interface.c **** uint32_t custom_mode = 0;   ///< Custom mode, can be defined by user/adopter
  22:mavlink_interface.c **** uint8_t system_state = MAV_STATE_STANDBY; ///a < System ready for flight
  23:mavlink_interface.c **** 
  24:mavlink_interface.c **** static int comms_packet_drops, comms_packet_success = 0;
  25:mavlink_interface.c **** 
  26:mavlink_interface.c **** //uint8_t buf[RH_NRF24_MAX_MESSAGE_LEN];
  27:mavlink_interface.c **** 
  28:mavlink_interface.c **** #define MAVLINK_MESSAGE_INFO_CUSTOM {MAVLINK_MESSAGE_INFO_HEARTBEAT, MAVLINK_MESSAGE_INFO_SYS_STATU
  29:mavlink_interface.c **** static const mavlink_message_info_t message_info[20] = MAVLINK_MESSAGE_INFO_CUSTOM;
  30:mavlink_interface.c **** 
  31:mavlink_interface.c **** #if 0
  32:mavlink_interface.c **** static void print_one_field(mavlink_message_t *msg, const mavlink_field_info_t *f, int idx) {
  33:mavlink_interface.c **** 
  34:mavlink_interface.c **** #define PRINT_FORMAT(f, def) (f->print_format?f->print_format:def)
  35:mavlink_interface.c **** 
  36:mavlink_interface.c **** 	switch (f->type) {
  37:mavlink_interface.c **** 	case MAVLINK_TYPE_CHAR:
  38:mavlink_interface.c **** 		print_std(PRINT_FORMAT(f, "%c"),
  39:mavlink_interface.c **** 				_MAV_RETURN_char(msg, f->wire_offset + idx * 1));
  40:mavlink_interface.c **** 		break;
  41:mavlink_interface.c **** 	case MAVLINK_TYPE_UINT8_T:
  42:mavlink_interface.c **** 		print_std(PRINT_FORMAT(f, "%u"),
  43:mavlink_interface.c **** 				_MAV_RETURN_uint8_t(msg, f->wire_offset + idx * 1));
  44:mavlink_interface.c **** 		break;
  45:mavlink_interface.c **** 	case MAVLINK_TYPE_INT8_T:
  46:mavlink_interface.c **** 		print_std(PRINT_FORMAT(f, "%d"),
  47:mavlink_interface.c **** 				_MAV_RETURN_int8_t(msg, f->wire_offset + idx * 1));
  48:mavlink_interface.c **** 		break;
  49:mavlink_interface.c **** 	case MAVLINK_TYPE_UINT16_T:
  50:mavlink_interface.c **** 		print_std(PRINT_FORMAT(f, "%u"),
  51:mavlink_interface.c **** 				_MAV_RETURN_uint16_t(msg, f->wire_offset + idx * 2));
  52:mavlink_interface.c **** 		break;
  53:mavlink_interface.c **** 	case MAVLINK_TYPE_INT16_T:
  54:mavlink_interface.c **** 		print_std(PRINT_FORMAT(f, "%d"),
  55:mavlink_interface.c **** 				_MAV_RETURN_int16_t(msg, f->wire_offset + idx * 2));
  56:mavlink_interface.c **** 		break;
  57:mavlink_interface.c **** 	case MAVLINK_TYPE_UINT32_T:
  58:mavlink_interface.c **** 		print_std(PRINT_FORMAT(f, "%lu"),
  59:mavlink_interface.c **** 				(unsigned long) _MAV_RETURN_uint32_t(msg,
  60:mavlink_interface.c **** 						f->wire_offset + idx * 4));
  61:mavlink_interface.c **** 		break;
  62:mavlink_interface.c **** 	case MAVLINK_TYPE_INT32_T:
  63:mavlink_interface.c **** 		print_std(PRINT_FORMAT(f, "%ld"),
  64:mavlink_interface.c **** 				(long) _MAV_RETURN_int32_t(msg, f->wire_offset + idx * 4));
  65:mavlink_interface.c **** 		break;
  66:mavlink_interface.c **** 	case MAVLINK_TYPE_UINT64_T:
  67:mavlink_interface.c **** 		print_std(PRINT_FORMAT(f, "%llu"),
  68:mavlink_interface.c **** 				(unsigned long long) _MAV_RETURN_uint64_t(msg,
  69:mavlink_interface.c **** 						f->wire_offset + idx * 8));
  70:mavlink_interface.c **** 		break;
  71:mavlink_interface.c **** 	case MAVLINK_TYPE_INT64_T:
  72:mavlink_interface.c **** 		print_std(PRINT_FORMAT(f, "%lld"),
  73:mavlink_interface.c **** 				(long long) _MAV_RETURN_int64_t(msg, f->wire_offset + idx * 8));
  74:mavlink_interface.c **** 		break;
  75:mavlink_interface.c **** 	case MAVLINK_TYPE_FLOAT:
  76:mavlink_interface.c **** 		print_std(PRINT_FORMAT(f, "%f"),
  77:mavlink_interface.c **** 				(double) _MAV_RETURN_float(msg, f->wire_offset + idx * 4));
  78:mavlink_interface.c **** 		break;
  79:mavlink_interface.c **** 	case MAVLINK_TYPE_DOUBLE:
  80:mavlink_interface.c **** 		print_std(PRINT_FORMAT(f, "%f"),
  81:mavlink_interface.c **** 				_MAV_RETURN_double(msg, f->wire_offset + idx * 8));
  82:mavlink_interface.c **** 		break;
  83:mavlink_interface.c **** 	}
  84:mavlink_interface.c **** }
  85:mavlink_interface.c **** 
  86:mavlink_interface.c **** static void print_field(mavlink_message_t *msg, const mavlink_field_info_t *f) {
  87:mavlink_interface.c **** 	print_std("%s: ", f->name);
  88:mavlink_interface.c **** 	if (f->array_length == 0) {
  89:mavlink_interface.c **** 		print_one_field(msg, f, 0);
  90:mavlink_interface.c **** 		print_std(" ");
  91:mavlink_interface.c **** 	} else {
  92:mavlink_interface.c **** 		unsigned i;
  93:mavlink_interface.c **** 		/* print an array */
  94:mavlink_interface.c **** 		if (f->type == MAVLINK_TYPE_CHAR) {
  95:mavlink_interface.c **** 			print_std("'%.*s'", f->array_length,
  96:mavlink_interface.c **** 					f->wire_offset + (const char *) _MAV_PAYLOAD(msg));
  97:mavlink_interface.c **** 		} else {
  98:mavlink_interface.c **** 			print_std("[ ");
  99:mavlink_interface.c **** 			for (i = 0; i < f->array_length; i++) {
 100:mavlink_interface.c **** 				print_one_field(msg, f, i);
 101:mavlink_interface.c **** 				if (i < f->array_length) {
 102:mavlink_interface.c **** 					print_std(", ");
 103:mavlink_interface.c **** 				}
 104:mavlink_interface.c **** 			}
 105:mavlink_interface.c **** 			print_std("]");
 106:mavlink_interface.c **** 		}
 107:mavlink_interface.c **** 	}
 108:mavlink_interface.c **** 	print_std(" ");
 109:mavlink_interface.c **** }
 110:mavlink_interface.c **** 
 111:mavlink_interface.c **** void print_message(mavlink_message_t *msg) {
 112:mavlink_interface.c **** 	//print_std("print_message\r\n");
 113:mavlink_interface.c **** 	const mavlink_message_info_t *m = &message_info[msg->msgid];
 114:mavlink_interface.c **** 	const mavlink_field_info_t *f = m->fields;
 115:mavlink_interface.c **** 	unsigned i;
 116:mavlink_interface.c **** 	print_std("%s { ", m->name);
 117:mavlink_interface.c **** 	for (i = 0; i < m->num_fields; i++) {
 118:mavlink_interface.c **** 		print_field(msg, &f[i]);
 119:mavlink_interface.c **** 	}
 120:mavlink_interface.c **** 	print_std("}\r\n");
 121:mavlink_interface.c **** }
 122:mavlink_interface.c **** #endif
 123:mavlink_interface.c **** 
 124:mavlink_interface.c **** void print_raw(uint8_t *buf, uint16_t len) {
  68               		.loc 2 124 0
  69               		.cfi_startproc
  70               	.LVL5:
  71 0000 0F93      		push r16
  72               	.LCFI0:
  73               		.cfi_def_cfa_offset 3
  74               		.cfi_offset 16, -2
  75 0002 1F93      		push r17
  76               	.LCFI1:
  77               		.cfi_def_cfa_offset 4
  78               		.cfi_offset 17, -3
  79 0004 CF93      		push r28
  80               	.LCFI2:
  81               		.cfi_def_cfa_offset 5
  82               		.cfi_offset 28, -4
  83 0006 DF93      		push r29
  84               	.LCFI3:
  85               		.cfi_def_cfa_offset 6
  86               		.cfi_offset 29, -5
  87               	/* prologue: function */
  88               	/* frame size = 0 */
  89               	/* stack size = 4 */
  90               	.L__stack_usage = 4
  91               	.LVL6:
  92 0008 EC01      		movw r28,r24
  93 000a 8C01      		movw r16,r24
  94 000c 060F      		add r16,r22
  95 000e 171F      		adc r17,r23
  96               	.LVL7:
  97               	.L3:
 125:mavlink_interface.c **** 
 126:mavlink_interface.c **** 	int i;
 127:mavlink_interface.c **** 
 128:mavlink_interface.c **** 	for (i = 0; i < len; i++) {
  98               		.loc 2 128 0 discriminator 1
  99 0010 C017      		cp r28,r16
 100 0012 D107      		cpc r29,r17
 101 0014 01F0      		breq .L6
 102               	.LBB75:
 129:mavlink_interface.c **** 		chSequentialStreamPut(OUTPUT_STD, buf[i]);
 103               		.loc 2 129 0 discriminator 3
 104 0016 6991      		ld r22,Y+
 105               	.LVL8:
 106 0018 70E0      		ldi r23,0
 107 001a 80E0      		ldi r24,lo8(SD1)
 108 001c 90E0      		ldi r25,hi8(SD1)
 109 001e 0E94 0000 		call chSequentialStreamPut
 110               	.LVL9:
 111 0022 00C0      		rjmp .L3
 112               	.L6:
 113               	/* epilogue start */
 114               	.LBE75:
 130:mavlink_interface.c **** 	}
 131:mavlink_interface.c **** 
 132:mavlink_interface.c **** }
 115               		.loc 2 132 0
 116 0024 DF91      		pop r29
 117 0026 CF91      		pop r28
 118               	.LVL10:
 119 0028 1F91      		pop r17
 120 002a 0F91      		pop r16
 121 002c 0895      		ret
 122               		.cfi_endproc
 123               	.LFE1420:
 125               		.section	.text.mavlink_reliable_send,"ax",@progbits
 126               	.global	mavlink_reliable_send
 128               	mavlink_reliable_send:
 129               	.LFB1421:
 133:mavlink_interface.c **** 
 134:mavlink_interface.c **** void mavlink_reliable_send(uint8_t *data, uint16_t dataLen, uint8_t targetAddress) {
 130               		.loc 2 134 0
 131               		.cfi_startproc
 132               	.LVL11:
 133               	/* prologue: function */
 134               	/* frame size = 0 */
 135               	/* stack size = 0 */
 136               	.L__stack_usage = 0
 135:mavlink_interface.c **** 
 136:mavlink_interface.c **** 	// Send a message to manager_server
 137:mavlink_interface.c **** 	if (RHReliableDatagram_sendtoWait(data, dataLen, targetAddress)) {
 137               		.loc 2 137 0
 138 0000 0C94 0000 		jmp RHReliableDatagram_sendtoWait
 139               	.LVL12:
 140               		.cfi_endproc
 141               	.LFE1421:
 143               		.section	.text.mavlink_server,"ax",@progbits
 144               	.global	mavlink_server
 146               	mavlink_server:
 147               	.LFB1423:
 138:mavlink_interface.c **** 
 139:mavlink_interface.c **** 	} else {
 140:mavlink_interface.c **** 		print_dbg("Debug: %s: %s\r\n", __func__, "sendtoWait failed");
 141:mavlink_interface.c **** 	}
 142:mavlink_interface.c **** 
 143:mavlink_interface.c **** }
 144:mavlink_interface.c **** 
 145:mavlink_interface.c **** void mavlink_client(uint8_t targetAddress) {
 146:mavlink_interface.c **** 	mavlink_heart(targetAddress);
 147:mavlink_interface.c **** }
 148:mavlink_interface.c **** 
 149:mavlink_interface.c **** void mavlink_server() {
 148               		.loc 2 149 0
 149               		.cfi_startproc
 150 0000 2F92      		push r2
 151               	.LCFI4:
 152               		.cfi_def_cfa_offset 3
 153               		.cfi_offset 2, -2
 154 0002 3F92      		push r3
 155               	.LCFI5:
 156               		.cfi_def_cfa_offset 4
 157               		.cfi_offset 3, -3
 158 0004 4F92      		push r4
 159               	.LCFI6:
 160               		.cfi_def_cfa_offset 5
 161               		.cfi_offset 4, -4
 162 0006 5F92      		push r5
 163               	.LCFI7:
 164               		.cfi_def_cfa_offset 6
 165               		.cfi_offset 5, -5
 166 0008 6F92      		push r6
 167               	.LCFI8:
 168               		.cfi_def_cfa_offset 7
 169               		.cfi_offset 6, -6
 170 000a 7F92      		push r7
 171               	.LCFI9:
 172               		.cfi_def_cfa_offset 8
 173               		.cfi_offset 7, -7
 174 000c 8F92      		push r8
 175               	.LCFI10:
 176               		.cfi_def_cfa_offset 9
 177               		.cfi_offset 8, -8
 178 000e 9F92      		push r9
 179               	.LCFI11:
 180               		.cfi_def_cfa_offset 10
 181               		.cfi_offset 9, -9
 182 0010 AF92      		push r10
 183               	.LCFI12:
 184               		.cfi_def_cfa_offset 11
 185               		.cfi_offset 10, -10
 186 0012 BF92      		push r11
 187               	.LCFI13:
 188               		.cfi_def_cfa_offset 12
 189               		.cfi_offset 11, -11
 190 0014 CF92      		push r12
 191               	.LCFI14:
 192               		.cfi_def_cfa_offset 13
 193               		.cfi_offset 12, -12
 194 0016 DF92      		push r13
 195               	.LCFI15:
 196               		.cfi_def_cfa_offset 14
 197               		.cfi_offset 13, -13
 198 0018 EF92      		push r14
 199               	.LCFI16:
 200               		.cfi_def_cfa_offset 15
 201               		.cfi_offset 14, -14
 202 001a FF92      		push r15
 203               	.LCFI17:
 204               		.cfi_def_cfa_offset 16
 205               		.cfi_offset 15, -15
 206 001c 0F93      		push r16
 207               	.LCFI18:
 208               		.cfi_def_cfa_offset 17
 209               		.cfi_offset 16, -16
 210 001e 1F93      		push r17
 211               	.LCFI19:
 212               		.cfi_def_cfa_offset 18
 213               		.cfi_offset 17, -17
 214 0020 CF93      		push r28
 215               	.LCFI20:
 216               		.cfi_def_cfa_offset 19
 217               		.cfi_offset 28, -18
 218 0022 DF93      		push r29
 219               	.LCFI21:
 220               		.cfi_def_cfa_offset 20
 221               		.cfi_offset 29, -19
 222 0024 00D0      		rcall .
 223 0026 1F92      		push __zero_reg__
 224               	.LCFI22:
 225               		.cfi_def_cfa_offset 23
 226 0028 CDB7      		in r28,__SP_L__
 227 002a DEB7      		in r29,__SP_H__
 228               	.LCFI23:
 229               		.cfi_def_cfa_register 28
 230               	/* prologue: function */
 231               	/* frame size = 3 */
 232               	/* stack size = 21 */
 233               	.L__stack_usage = 21
 150:mavlink_interface.c **** 	//chprintf((BaseChannel *) &SDU1, "NRF test thread created\r\n");
 151:mavlink_interface.c **** 	uint8_t buf[RH_NRF24_maxMessageLength()];
 152:mavlink_interface.c **** 	uint8_t len;
 153:mavlink_interface.c **** 	int i;
 154:mavlink_interface.c **** 	mavlink_message_t msg;
 155:mavlink_interface.c **** 	mavlink_status_t status;
 156:mavlink_interface.c **** 
 157:mavlink_interface.c **** 	if (RHReliableDatagram_available()) {
 158:mavlink_interface.c **** 		// Wait for a message addressed to us from the client
 159:mavlink_interface.c **** 		uint8_t len = sizeof(buf);
 160:mavlink_interface.c **** 		uint8_t from;
 161:mavlink_interface.c **** 		if (RHReliableDatagram_recvfromAck(buf, &len, &from, NULL, NULL, NULL)) {
 162:mavlink_interface.c **** 			//print_dbg("Debug: %s : got request from : %d : %s\r\n", __func__, from, (char* )buf);
 163:mavlink_interface.c **** 
 164:mavlink_interface.c **** //				len = nrf_recv(nrf, buf, sizeof(buf));
 165:mavlink_interface.c **** //
 166:mavlink_interface.c **** //				//print_std("NRF RECV: len=%d, val=%s\r\n", len, buf);
 167:mavlink_interface.c **** 
 168:mavlink_interface.c **** 			for (i = 0; i < len; i++) {
 169:mavlink_interface.c **** 				if (mavlink_parse_char(MAVLINK_COMM_0, buf[i], &msg, &status)) {
 170:mavlink_interface.c **** 					//gwinPrintf(GW1,"MAVLINK RECV %d: msg id=%d, sys id=%d\r\n", msg.seq, msg.msgid, msg.sysid);
 171:mavlink_interface.c **** 					//print_message(&msg);
 172:mavlink_interface.c **** 
 173:mavlink_interface.c **** 					switch (msg.msgid) {
 174:mavlink_interface.c **** 					case MAVLINK_MSG_ID_HEARTBEAT: {
 175:mavlink_interface.c **** 						// E.g. read GCS heartbeat and go into
 176:mavlink_interface.c **** 						// comm lost mode if timer times out
 177:mavlink_interface.c **** 						//print_std("heart\r\n");
 178:mavlink_interface.c **** 						print_dbg("Debug: heart\r\n");
 179:mavlink_interface.c **** 					}
 180:mavlink_interface.c **** 						break;
 181:mavlink_interface.c **** 					case MAVLINK_MSG_ID_SYS_STATUS:
 182:mavlink_interface.c **** 						// EXECUTE ACTION
 183:mavlink_interface.c **** 						print_dbg("Debug: status\r\n");
 184:mavlink_interface.c **** 						break;
 185:mavlink_interface.c **** 					case MAVLINK_MSG_ID_ATTITUDE:
 186:mavlink_interface.c **** 						print_dbg("Debug: attitude\r\n");
 187:mavlink_interface.c **** //							gwinPrintf(GW3, "attitude\r\n");
 188:mavlink_interface.c **** //							mavlink_msg_attitude_decode(&msg, &attitude);
 189:mavlink_interface.c **** //							gwinPrintf(GW3, "r: %d, p: %d, y: %d\r\n", FLOAT_TO_FLOAT_T(ToDeg(attitude.roll)), FLOAT_T
 190:mavlink_interface.c **** //							drawYaw_float(80, 180, 50, FLOAT_TO_FLOAT_T(ToDeg(attitude.yaw)));
 191:mavlink_interface.c **** //							drawRollPitch_float(80, 80, 68, 120, FLOAT_TO_FLOAT_T(ToDeg(attitude.pitch)), FLOAT_TO_FLO
 192:mavlink_interface.c **** 						break;
 193:mavlink_interface.c **** 					default:
 194:mavlink_interface.c **** 						//Do nothing
 195:mavlink_interface.c **** 						break;
 196:mavlink_interface.c **** 					}
 197:mavlink_interface.c **** 
 198:mavlink_interface.c **** 					//				comms_packet_drops += status.packet_rx_drop_count;
 199:mavlink_interface.c **** 					//				comms_packet_success += status.packet_rx_success_count;
 200:mavlink_interface.c **** 
 201:mavlink_interface.c **** 				}
 202:mavlink_interface.c **** 			}
 203:mavlink_interface.c **** 
 204:mavlink_interface.c **** 		}
 205:mavlink_interface.c **** 
 206:mavlink_interface.c **** 	}
 207:mavlink_interface.c **** }
 234               		.loc 2 207 0
 235 002c 8DB6      		in r8,__SP_L__
 236 002e 9EB6      		in r9,__SP_H__
 151:mavlink_interface.c **** 	uint8_t len;
 237               		.loc 2 151 0
 238 0030 0E94 0000 		call RH_NRF24_maxMessageLength
 239               	.LVL13:
 240 0034 182F      		mov r17,r24
 241               	.LVL14:
 242 0036 8DB7      		in r24,__SP_L__
 243 0038 9EB7      		in r25,__SP_H__
 244 003a 811B      		sub r24,r17
 245 003c 9109      		sbc r25,__zero_reg__
 246 003e 0FB6      		in __tmp_reg__,__SREG__
 247 0040 F894      		cli
 248 0042 9EBF      		out __SP_H__,r25
 249 0044 0FBE      		out __SREG__,__tmp_reg__
 250 0046 8DBF      		out __SP_L__,r24
 251 0048 EDB7      		in r30,__SP_L__
 252 004a FEB7      		in r31,__SP_H__
 253 004c 3196      		adiw r30,1
 254 004e 6F01      		movw r12,r30
 255               	.LVL15:
 157:mavlink_interface.c **** 		// Wait for a message addressed to us from the client
 256               		.loc 2 157 0
 257 0050 0E94 0000 		call RHReliableDatagram_available
 258               	.LVL16:
 259 0054 8823      		tst r24
 260 0056 01F4      		brne .+2
 261 0058 00C0      		rjmp .L8
 262               	.LBB105:
 159:mavlink_interface.c **** 		uint8_t from;
 263               		.loc 2 159 0
 264 005a 1A83      		std Y+2,r17
 161:mavlink_interface.c **** 			//print_dbg("Debug: %s : got request from : %d : %s\r\n", __func__, from, (char* )buf);
 265               		.loc 2 161 0
 266 005c E12C      		mov r14,__zero_reg__
 267 005e F12C      		mov r15,__zero_reg__
 268 0060 00E0      		ldi r16,0
 269 0062 10E0      		ldi r17,0
 270 0064 20E0      		ldi r18,0
 271 0066 30E0      		ldi r19,0
 272 0068 AE01      		movw r20,r28
 273 006a 4F5F      		subi r20,-1
 274 006c 5F4F      		sbci r21,-1
 275 006e BE01      		movw r22,r28
 276 0070 6E5F      		subi r22,-2
 277 0072 7F4F      		sbci r23,-1
 278 0074 C601      		movw r24,r12
 279 0076 0E94 0000 		call RHReliableDatagram_recvfromAck
 280               	.LVL17:
 281 007a 8823      		tst r24
 282 007c 01F4      		brne .+2
 283 007e 00C0      		rjmp .L8
 284 0080 7601      		movw r14,r12
 285               	.LBB106:
 286               	.LBB107:
 287               		.file 3 "./mavlink/common/../mavlink_helpers.h"
   1:./mavlink/common/../mavlink_helpers.h **** #ifndef  _MAVLINK_HELPERS_H_
   2:./mavlink/common/../mavlink_helpers.h **** #define  _MAVLINK_HELPERS_H_
   3:./mavlink/common/../mavlink_helpers.h **** 
   4:./mavlink/common/../mavlink_helpers.h **** #include "string.h"
   5:./mavlink/common/../mavlink_helpers.h **** #include "checksum.h"
   6:./mavlink/common/../mavlink_helpers.h **** #include "mavlink_types.h"
   7:./mavlink/common/../mavlink_helpers.h **** #include "mavlink_conversions.h"
   8:./mavlink/common/../mavlink_helpers.h **** 
   9:./mavlink/common/../mavlink_helpers.h **** #ifndef MAVLINK_HELPER
  10:./mavlink/common/../mavlink_helpers.h **** #define MAVLINK_HELPER
  11:./mavlink/common/../mavlink_helpers.h **** #endif
  12:./mavlink/common/../mavlink_helpers.h **** 
  13:./mavlink/common/../mavlink_helpers.h **** /*
  14:./mavlink/common/../mavlink_helpers.h ****  * Internal function to give access to the channel status for each channel
  15:./mavlink/common/../mavlink_helpers.h ****  */
  16:./mavlink/common/../mavlink_helpers.h **** #ifndef MAVLINK_GET_CHANNEL_STATUS
  17:./mavlink/common/../mavlink_helpers.h **** MAVLINK_HELPER mavlink_status_t* mavlink_get_channel_status(uint8_t chan)
  18:./mavlink/common/../mavlink_helpers.h **** {
  19:./mavlink/common/../mavlink_helpers.h **** #ifdef MAVLINK_EXTERNAL_RX_STATUS
  20:./mavlink/common/../mavlink_helpers.h **** 	// No m_mavlink_status array defined in function,
  21:./mavlink/common/../mavlink_helpers.h **** 	// has to be defined externally
  22:./mavlink/common/../mavlink_helpers.h **** #else
  23:./mavlink/common/../mavlink_helpers.h **** 	static mavlink_status_t m_mavlink_status[MAVLINK_COMM_NUM_BUFFERS];
  24:./mavlink/common/../mavlink_helpers.h **** #endif
  25:./mavlink/common/../mavlink_helpers.h **** 	return &m_mavlink_status[chan];
  26:./mavlink/common/../mavlink_helpers.h **** }
  27:./mavlink/common/../mavlink_helpers.h **** #endif
  28:./mavlink/common/../mavlink_helpers.h **** 
  29:./mavlink/common/../mavlink_helpers.h **** /*
  30:./mavlink/common/../mavlink_helpers.h ****  * Internal function to give access to the channel buffer for each channel
  31:./mavlink/common/../mavlink_helpers.h ****  */
  32:./mavlink/common/../mavlink_helpers.h **** #ifndef MAVLINK_GET_CHANNEL_BUFFER
  33:./mavlink/common/../mavlink_helpers.h **** MAVLINK_HELPER mavlink_message_t* mavlink_get_channel_buffer(uint8_t chan)
  34:./mavlink/common/../mavlink_helpers.h **** {
  35:./mavlink/common/../mavlink_helpers.h **** 	
  36:./mavlink/common/../mavlink_helpers.h **** #ifdef MAVLINK_EXTERNAL_RX_BUFFER
  37:./mavlink/common/../mavlink_helpers.h **** 	// No m_mavlink_buffer array defined in function,
  38:./mavlink/common/../mavlink_helpers.h **** 	// has to be defined externally
  39:./mavlink/common/../mavlink_helpers.h **** #else
  40:./mavlink/common/../mavlink_helpers.h **** 	static mavlink_message_t m_mavlink_buffer[MAVLINK_COMM_NUM_BUFFERS];
  41:./mavlink/common/../mavlink_helpers.h **** #endif
  42:./mavlink/common/../mavlink_helpers.h **** 	return &m_mavlink_buffer[chan];
  43:./mavlink/common/../mavlink_helpers.h **** }
  44:./mavlink/common/../mavlink_helpers.h **** #endif
  45:./mavlink/common/../mavlink_helpers.h **** 
  46:./mavlink/common/../mavlink_helpers.h **** /**
  47:./mavlink/common/../mavlink_helpers.h ****  * @brief Reset the status of a channel.
  48:./mavlink/common/../mavlink_helpers.h ****  */
  49:./mavlink/common/../mavlink_helpers.h **** MAVLINK_HELPER void mavlink_reset_channel_status(uint8_t chan)
  50:./mavlink/common/../mavlink_helpers.h **** {
  51:./mavlink/common/../mavlink_helpers.h **** 	mavlink_status_t *status = mavlink_get_channel_status(chan);
  52:./mavlink/common/../mavlink_helpers.h **** 	status->parse_state = MAVLINK_PARSE_STATE_IDLE;
  53:./mavlink/common/../mavlink_helpers.h **** }
  54:./mavlink/common/../mavlink_helpers.h **** 
  55:./mavlink/common/../mavlink_helpers.h **** /**
  56:./mavlink/common/../mavlink_helpers.h ****  * @brief Finalize a MAVLink message with channel assignment
  57:./mavlink/common/../mavlink_helpers.h ****  *
  58:./mavlink/common/../mavlink_helpers.h ****  * This function calculates the checksum and sets length and aircraft id correctly.
  59:./mavlink/common/../mavlink_helpers.h ****  * It assumes that the message id and the payload are already correctly set. This function
  60:./mavlink/common/../mavlink_helpers.h ****  * can also be used if the message header has already been written before (as in mavlink_msg_xxx_pa
  61:./mavlink/common/../mavlink_helpers.h ****  * instead of mavlink_msg_xxx_pack_headerless), it just introduces little extra overhead.
  62:./mavlink/common/../mavlink_helpers.h ****  *
  63:./mavlink/common/../mavlink_helpers.h ****  * @param msg Message to finalize
  64:./mavlink/common/../mavlink_helpers.h ****  * @param system_id Id of the sending (this) system, 1-127
  65:./mavlink/common/../mavlink_helpers.h ****  * @param length Message length
  66:./mavlink/common/../mavlink_helpers.h ****  */
  67:./mavlink/common/../mavlink_helpers.h **** #if MAVLINK_CRC_EXTRA
  68:./mavlink/common/../mavlink_helpers.h **** MAVLINK_HELPER uint16_t mavlink_finalize_message_chan(mavlink_message_t* msg, uint8_t system_id, ui
  69:./mavlink/common/../mavlink_helpers.h **** 						      uint8_t chan, uint8_t length, uint8_t crc_extra)
  70:./mavlink/common/../mavlink_helpers.h **** #else
  71:./mavlink/common/../mavlink_helpers.h **** MAVLINK_HELPER uint16_t mavlink_finalize_message_chan(mavlink_message_t* msg, uint8_t system_id, ui
  72:./mavlink/common/../mavlink_helpers.h **** 						      uint8_t chan, uint8_t length)
  73:./mavlink/common/../mavlink_helpers.h **** #endif
  74:./mavlink/common/../mavlink_helpers.h **** {
  75:./mavlink/common/../mavlink_helpers.h **** 	// This code part is the same for all messages;
  76:./mavlink/common/../mavlink_helpers.h **** 	msg->magic = MAVLINK_STX;
  77:./mavlink/common/../mavlink_helpers.h **** 	msg->len = length;
  78:./mavlink/common/../mavlink_helpers.h **** 	msg->sysid = system_id;
  79:./mavlink/common/../mavlink_helpers.h **** 	msg->compid = component_id;
  80:./mavlink/common/../mavlink_helpers.h **** 	// One sequence number per component
  81:./mavlink/common/../mavlink_helpers.h **** 	msg->seq = mavlink_get_channel_status(chan)->current_tx_seq;
  82:./mavlink/common/../mavlink_helpers.h **** 	mavlink_get_channel_status(chan)->current_tx_seq = mavlink_get_channel_status(chan)->current_tx_se
  83:./mavlink/common/../mavlink_helpers.h **** 	msg->checksum = crc_calculate(((const uint8_t*)(msg)) + 3, MAVLINK_CORE_HEADER_LEN);
  84:./mavlink/common/../mavlink_helpers.h **** 	crc_accumulate_buffer(&msg->checksum, _MAV_PAYLOAD(msg), msg->len);
  85:./mavlink/common/../mavlink_helpers.h **** #if MAVLINK_CRC_EXTRA
  86:./mavlink/common/../mavlink_helpers.h **** 	crc_accumulate(crc_extra, &msg->checksum);
  87:./mavlink/common/../mavlink_helpers.h **** #endif
  88:./mavlink/common/../mavlink_helpers.h **** 	mavlink_ck_a(msg) = (uint8_t)(msg->checksum & 0xFF);
  89:./mavlink/common/../mavlink_helpers.h **** 	mavlink_ck_b(msg) = (uint8_t)(msg->checksum >> 8);
  90:./mavlink/common/../mavlink_helpers.h **** 
  91:./mavlink/common/../mavlink_helpers.h **** 	return length + MAVLINK_NUM_NON_PAYLOAD_BYTES;
  92:./mavlink/common/../mavlink_helpers.h **** }
  93:./mavlink/common/../mavlink_helpers.h **** 
  94:./mavlink/common/../mavlink_helpers.h **** 
  95:./mavlink/common/../mavlink_helpers.h **** /**
  96:./mavlink/common/../mavlink_helpers.h ****  * @brief Finalize a MAVLink message with MAVLINK_COMM_0 as default channel
  97:./mavlink/common/../mavlink_helpers.h ****  */
  98:./mavlink/common/../mavlink_helpers.h **** #if MAVLINK_CRC_EXTRA
  99:./mavlink/common/../mavlink_helpers.h **** MAVLINK_HELPER uint16_t mavlink_finalize_message(mavlink_message_t* msg, uint8_t system_id, uint8_t
 100:./mavlink/common/../mavlink_helpers.h **** 						 uint8_t length, uint8_t crc_extra)
 101:./mavlink/common/../mavlink_helpers.h **** {
 102:./mavlink/common/../mavlink_helpers.h **** 	return mavlink_finalize_message_chan(msg, system_id, component_id, MAVLINK_COMM_0, length, crc_ext
 103:./mavlink/common/../mavlink_helpers.h **** }
 104:./mavlink/common/../mavlink_helpers.h **** #else
 105:./mavlink/common/../mavlink_helpers.h **** MAVLINK_HELPER uint16_t mavlink_finalize_message(mavlink_message_t* msg, uint8_t system_id, uint8_t
 106:./mavlink/common/../mavlink_helpers.h **** 						 uint8_t length)
 107:./mavlink/common/../mavlink_helpers.h **** {
 108:./mavlink/common/../mavlink_helpers.h **** 	return mavlink_finalize_message_chan(msg, system_id, component_id, MAVLINK_COMM_0, length);
 109:./mavlink/common/../mavlink_helpers.h **** }
 110:./mavlink/common/../mavlink_helpers.h **** #endif
 111:./mavlink/common/../mavlink_helpers.h **** 
 112:./mavlink/common/../mavlink_helpers.h **** #ifdef MAVLINK_USE_CONVENIENCE_FUNCTIONS
 113:./mavlink/common/../mavlink_helpers.h **** MAVLINK_HELPER void _mavlink_send_uart(mavlink_channel_t chan, const char *buf, uint16_t len);
 114:./mavlink/common/../mavlink_helpers.h **** 
 115:./mavlink/common/../mavlink_helpers.h **** /**
 116:./mavlink/common/../mavlink_helpers.h ****  * @brief Finalize a MAVLink message with channel assignment and send
 117:./mavlink/common/../mavlink_helpers.h ****  */
 118:./mavlink/common/../mavlink_helpers.h **** #if MAVLINK_CRC_EXTRA
 119:./mavlink/common/../mavlink_helpers.h **** MAVLINK_HELPER void _mav_finalize_message_chan_send(mavlink_channel_t chan, uint8_t msgid, const ch
 120:./mavlink/common/../mavlink_helpers.h **** 						    uint8_t length, uint8_t crc_extra)
 121:./mavlink/common/../mavlink_helpers.h **** #else
 122:./mavlink/common/../mavlink_helpers.h **** MAVLINK_HELPER void _mav_finalize_message_chan_send(mavlink_channel_t chan, uint8_t msgid, const ch
 123:./mavlink/common/../mavlink_helpers.h **** #endif
 124:./mavlink/common/../mavlink_helpers.h **** {
 125:./mavlink/common/../mavlink_helpers.h **** 	uint16_t checksum;
 126:./mavlink/common/../mavlink_helpers.h **** 	uint8_t buf[MAVLINK_NUM_HEADER_BYTES];
 127:./mavlink/common/../mavlink_helpers.h **** 	uint8_t ck[2];
 128:./mavlink/common/../mavlink_helpers.h **** 	mavlink_status_t *status = mavlink_get_channel_status(chan);
 129:./mavlink/common/../mavlink_helpers.h **** 	buf[0] = MAVLINK_STX;
 130:./mavlink/common/../mavlink_helpers.h **** 	buf[1] = length;
 131:./mavlink/common/../mavlink_helpers.h **** 	buf[2] = status->current_tx_seq;
 132:./mavlink/common/../mavlink_helpers.h **** 	buf[3] = mavlink_system.sysid;
 133:./mavlink/common/../mavlink_helpers.h **** 	buf[4] = mavlink_system.compid;
 134:./mavlink/common/../mavlink_helpers.h **** 	buf[5] = msgid;
 135:./mavlink/common/../mavlink_helpers.h **** 	status->current_tx_seq++;
 136:./mavlink/common/../mavlink_helpers.h **** 	checksum = crc_calculate((const uint8_t*)&buf[1], MAVLINK_CORE_HEADER_LEN);
 137:./mavlink/common/../mavlink_helpers.h **** 	crc_accumulate_buffer(&checksum, packet, length);
 138:./mavlink/common/../mavlink_helpers.h **** #if MAVLINK_CRC_EXTRA
 139:./mavlink/common/../mavlink_helpers.h **** 	crc_accumulate(crc_extra, &checksum);
 140:./mavlink/common/../mavlink_helpers.h **** #endif
 141:./mavlink/common/../mavlink_helpers.h **** 	ck[0] = (uint8_t)(checksum & 0xFF);
 142:./mavlink/common/../mavlink_helpers.h **** 	ck[1] = (uint8_t)(checksum >> 8);
 143:./mavlink/common/../mavlink_helpers.h **** 
 144:./mavlink/common/../mavlink_helpers.h **** 	MAVLINK_START_UART_SEND(chan, MAVLINK_NUM_NON_PAYLOAD_BYTES + (uint16_t)length);
 145:./mavlink/common/../mavlink_helpers.h **** 	_mavlink_send_uart(chan, (const char *)buf, MAVLINK_NUM_HEADER_BYTES);
 146:./mavlink/common/../mavlink_helpers.h **** 	_mavlink_send_uart(chan, packet, length);
 147:./mavlink/common/../mavlink_helpers.h **** 	_mavlink_send_uart(chan, (const char *)ck, 2);
 148:./mavlink/common/../mavlink_helpers.h **** 	MAVLINK_END_UART_SEND(chan, MAVLINK_NUM_NON_PAYLOAD_BYTES + (uint16_t)length);
 149:./mavlink/common/../mavlink_helpers.h **** }
 150:./mavlink/common/../mavlink_helpers.h **** 
 151:./mavlink/common/../mavlink_helpers.h **** /**
 152:./mavlink/common/../mavlink_helpers.h ****  * @brief re-send a message over a uart channel
 153:./mavlink/common/../mavlink_helpers.h ****  * this is more stack efficient than re-marshalling the message
 154:./mavlink/common/../mavlink_helpers.h ****  */
 155:./mavlink/common/../mavlink_helpers.h **** MAVLINK_HELPER void _mavlink_resend_uart(mavlink_channel_t chan, const mavlink_message_t *msg)
 156:./mavlink/common/../mavlink_helpers.h **** {
 157:./mavlink/common/../mavlink_helpers.h **** 	uint8_t ck[2];
 158:./mavlink/common/../mavlink_helpers.h **** 
 159:./mavlink/common/../mavlink_helpers.h **** 	ck[0] = (uint8_t)(msg->checksum & 0xFF);
 160:./mavlink/common/../mavlink_helpers.h **** 	ck[1] = (uint8_t)(msg->checksum >> 8);
 161:./mavlink/common/../mavlink_helpers.h **** 	// XXX use the right sequence here
 162:./mavlink/common/../mavlink_helpers.h **** 
 163:./mavlink/common/../mavlink_helpers.h **** 	MAVLINK_START_UART_SEND(chan, MAVLINK_NUM_NON_PAYLOAD_BYTES + msg->len);
 164:./mavlink/common/../mavlink_helpers.h **** 	_mavlink_send_uart(chan, (const char *)&msg->magic, MAVLINK_NUM_HEADER_BYTES);
 165:./mavlink/common/../mavlink_helpers.h **** 	_mavlink_send_uart(chan, _MAV_PAYLOAD(msg), msg->len);
 166:./mavlink/common/../mavlink_helpers.h **** 	_mavlink_send_uart(chan, (const char *)ck, 2);
 167:./mavlink/common/../mavlink_helpers.h **** 	MAVLINK_END_UART_SEND(chan, MAVLINK_NUM_NON_PAYLOAD_BYTES + msg->len);
 168:./mavlink/common/../mavlink_helpers.h **** }
 169:./mavlink/common/../mavlink_helpers.h **** #endif // MAVLINK_USE_CONVENIENCE_FUNCTIONS
 170:./mavlink/common/../mavlink_helpers.h **** 
 171:./mavlink/common/../mavlink_helpers.h **** /**
 172:./mavlink/common/../mavlink_helpers.h ****  * @brief Pack a message to send it over a serial byte stream
 173:./mavlink/common/../mavlink_helpers.h ****  */
 174:./mavlink/common/../mavlink_helpers.h **** MAVLINK_HELPER uint16_t mavlink_msg_to_send_buffer(uint8_t *buffer, const mavlink_message_t *msg)
 175:./mavlink/common/../mavlink_helpers.h **** {
 176:./mavlink/common/../mavlink_helpers.h **** 	memcpy(buffer, (const uint8_t *)&msg->magic, MAVLINK_NUM_HEADER_BYTES + (uint16_t)msg->len);
 177:./mavlink/common/../mavlink_helpers.h **** 
 178:./mavlink/common/../mavlink_helpers.h **** 	uint8_t *ck = buffer + (MAVLINK_NUM_HEADER_BYTES + (uint16_t)msg->len);
 179:./mavlink/common/../mavlink_helpers.h **** 
 180:./mavlink/common/../mavlink_helpers.h **** 	ck[0] = (uint8_t)(msg->checksum & 0xFF);
 181:./mavlink/common/../mavlink_helpers.h **** 	ck[1] = (uint8_t)(msg->checksum >> 8);
 182:./mavlink/common/../mavlink_helpers.h **** 
 183:./mavlink/common/../mavlink_helpers.h **** 	return MAVLINK_NUM_NON_PAYLOAD_BYTES + (uint16_t)msg->len;
 184:./mavlink/common/../mavlink_helpers.h **** }
 185:./mavlink/common/../mavlink_helpers.h **** 
 186:./mavlink/common/../mavlink_helpers.h **** union __mavlink_bitfield {
 187:./mavlink/common/../mavlink_helpers.h **** 	uint8_t uint8;
 188:./mavlink/common/../mavlink_helpers.h **** 	int8_t int8;
 189:./mavlink/common/../mavlink_helpers.h **** 	uint16_t uint16;
 190:./mavlink/common/../mavlink_helpers.h **** 	int16_t int16;
 191:./mavlink/common/../mavlink_helpers.h **** 	uint32_t uint32;
 192:./mavlink/common/../mavlink_helpers.h **** 	int32_t int32;
 193:./mavlink/common/../mavlink_helpers.h **** };
 194:./mavlink/common/../mavlink_helpers.h **** 
 195:./mavlink/common/../mavlink_helpers.h **** 
 196:./mavlink/common/../mavlink_helpers.h **** MAVLINK_HELPER void mavlink_start_checksum(mavlink_message_t* msg)
 197:./mavlink/common/../mavlink_helpers.h **** {
 198:./mavlink/common/../mavlink_helpers.h **** 	crc_init(&msg->checksum);
 199:./mavlink/common/../mavlink_helpers.h **** }
 200:./mavlink/common/../mavlink_helpers.h **** 
 201:./mavlink/common/../mavlink_helpers.h **** MAVLINK_HELPER void mavlink_update_checksum(mavlink_message_t* msg, uint8_t c)
 202:./mavlink/common/../mavlink_helpers.h **** {
 203:./mavlink/common/../mavlink_helpers.h **** 	crc_accumulate(c, &msg->checksum);
 204:./mavlink/common/../mavlink_helpers.h **** }
 205:./mavlink/common/../mavlink_helpers.h **** 
 206:./mavlink/common/../mavlink_helpers.h **** /**
 207:./mavlink/common/../mavlink_helpers.h ****  * This is a convenience function which handles the complete MAVLink parsing.
 208:./mavlink/common/../mavlink_helpers.h ****  * the function will parse one byte at a time and return the complete packet once
 209:./mavlink/common/../mavlink_helpers.h ****  * it could be successfully decoded. Checksum and other failures will be silently
 210:./mavlink/common/../mavlink_helpers.h ****  * ignored.
 211:./mavlink/common/../mavlink_helpers.h ****  *
 212:./mavlink/common/../mavlink_helpers.h ****  * Messages are parsed into an internal buffer (one for each channel). When a complete
 213:./mavlink/common/../mavlink_helpers.h ****  * message is received it is copies into *returnMsg and the channel's status is
 214:./mavlink/common/../mavlink_helpers.h ****  * copied into *returnStats.
 215:./mavlink/common/../mavlink_helpers.h ****  *
 216:./mavlink/common/../mavlink_helpers.h ****  * @param chan     ID of the current channel. This allows to parse different channels with this fun
 217:./mavlink/common/../mavlink_helpers.h ****  *                 a channel is not a physical message channel like a serial port, but a logic part
 218:./mavlink/common/../mavlink_helpers.h ****  *                 the communication streams in this case. COMM_NB is the limit for the number of c
 219:./mavlink/common/../mavlink_helpers.h ****  *                 on MCU (e.g. ARM7), while COMM_NB_HIGH is the limit for the number of channels i
 220:./mavlink/common/../mavlink_helpers.h ****  * @param c        The char to parse
 221:./mavlink/common/../mavlink_helpers.h ****  *
 222:./mavlink/common/../mavlink_helpers.h ****  * @param returnMsg NULL if no message could be decoded, the message data else
 223:./mavlink/common/../mavlink_helpers.h ****  * @param returnStats if a message was decoded, this is filled with the channel's stats
 224:./mavlink/common/../mavlink_helpers.h ****  * @return 0 if no message could be decoded, 1 else
 225:./mavlink/common/../mavlink_helpers.h ****  *
 226:./mavlink/common/../mavlink_helpers.h ****  * A typical use scenario of this function call is:
 227:./mavlink/common/../mavlink_helpers.h ****  *
 228:./mavlink/common/../mavlink_helpers.h ****  * @code
 229:./mavlink/common/../mavlink_helpers.h ****  * #include <inttypes.h> // For fixed-width uint8_t type
 230:./mavlink/common/../mavlink_helpers.h ****  *
 231:./mavlink/common/../mavlink_helpers.h ****  * mavlink_message_t msg;
 232:./mavlink/common/../mavlink_helpers.h ****  * int chan = 0;
 233:./mavlink/common/../mavlink_helpers.h ****  *
 234:./mavlink/common/../mavlink_helpers.h ****  *
 235:./mavlink/common/../mavlink_helpers.h ****  * while(serial.bytesAvailable > 0)
 236:./mavlink/common/../mavlink_helpers.h ****  * {
 237:./mavlink/common/../mavlink_helpers.h ****  *   uint8_t byte = serial.getNextByte();
 238:./mavlink/common/../mavlink_helpers.h ****  *   if (mavlink_parse_char(chan, byte, &msg))
 239:./mavlink/common/../mavlink_helpers.h ****  *     {
 240:./mavlink/common/../mavlink_helpers.h ****  *     printf("Received message with ID %d, sequence: %d from component %d of system %d", msg.msgid
 241:./mavlink/common/../mavlink_helpers.h ****  *     }
 242:./mavlink/common/../mavlink_helpers.h ****  * }
 243:./mavlink/common/../mavlink_helpers.h ****  *
 244:./mavlink/common/../mavlink_helpers.h ****  *
 245:./mavlink/common/../mavlink_helpers.h ****  * @endcode
 246:./mavlink/common/../mavlink_helpers.h ****  */
 247:./mavlink/common/../mavlink_helpers.h **** MAVLINK_HELPER uint8_t mavlink_parse_char(uint8_t chan, uint8_t c, mavlink_message_t* r_message, ma
 248:./mavlink/common/../mavlink_helpers.h **** {
 249:./mavlink/common/../mavlink_helpers.h ****         /*
 250:./mavlink/common/../mavlink_helpers.h **** 	  default message crc function. You can override this per-system to
 251:./mavlink/common/../mavlink_helpers.h **** 	  put this data in a different memory segment
 252:./mavlink/common/../mavlink_helpers.h **** 	*/
 253:./mavlink/common/../mavlink_helpers.h **** #if MAVLINK_CRC_EXTRA
 254:./mavlink/common/../mavlink_helpers.h **** #ifndef MAVLINK_MESSAGE_CRC
 255:./mavlink/common/../mavlink_helpers.h **** 	static const uint8_t mavlink_message_crcs[256] = MAVLINK_MESSAGE_CRCS;
 256:./mavlink/common/../mavlink_helpers.h **** #define MAVLINK_MESSAGE_CRC(msgid) mavlink_message_crcs[msgid]
 257:./mavlink/common/../mavlink_helpers.h **** #endif
 258:./mavlink/common/../mavlink_helpers.h **** #endif
 259:./mavlink/common/../mavlink_helpers.h **** 
 260:./mavlink/common/../mavlink_helpers.h **** /* Enable this option to check the length of each message.
 261:./mavlink/common/../mavlink_helpers.h ****  This allows invalid messages to be caught much sooner. Use if the transmission
 262:./mavlink/common/../mavlink_helpers.h ****  medium is prone to missing (or extra) characters (e.g. a radio that fades in
 263:./mavlink/common/../mavlink_helpers.h ****  and out). Only use if the channel will only contain messages types listed in
 264:./mavlink/common/../mavlink_helpers.h ****  the headers.
 265:./mavlink/common/../mavlink_helpers.h **** */
 266:./mavlink/common/../mavlink_helpers.h **** #ifdef MAVLINK_CHECK_MESSAGE_LENGTH
 267:./mavlink/common/../mavlink_helpers.h **** #ifndef MAVLINK_MESSAGE_LENGTH
 268:./mavlink/common/../mavlink_helpers.h **** 	static const uint8_t mavlink_message_lengths[256] = MAVLINK_MESSAGE_LENGTHS;
 269:./mavlink/common/../mavlink_helpers.h **** #define MAVLINK_MESSAGE_LENGTH(msgid) mavlink_message_lengths[msgid]
 270:./mavlink/common/../mavlink_helpers.h **** #endif
 271:./mavlink/common/../mavlink_helpers.h **** #endif
 272:./mavlink/common/../mavlink_helpers.h **** 
 273:./mavlink/common/../mavlink_helpers.h **** 	mavlink_message_t* rxmsg = mavlink_get_channel_buffer(chan); ///< The currently decoded message
 274:./mavlink/common/../mavlink_helpers.h **** 	mavlink_status_t* status = mavlink_get_channel_status(chan); ///< The current decode status
 275:./mavlink/common/../mavlink_helpers.h **** 	int bufferIndex = 0;
 276:./mavlink/common/../mavlink_helpers.h **** 
 277:./mavlink/common/../mavlink_helpers.h **** 	status->msg_received = 0;
 278:./mavlink/common/../mavlink_helpers.h **** 
 279:./mavlink/common/../mavlink_helpers.h **** 	switch (status->parse_state)
 280:./mavlink/common/../mavlink_helpers.h **** 	{
 281:./mavlink/common/../mavlink_helpers.h **** 	case MAVLINK_PARSE_STATE_UNINIT:
 282:./mavlink/common/../mavlink_helpers.h **** 	case MAVLINK_PARSE_STATE_IDLE:
 283:./mavlink/common/../mavlink_helpers.h **** 		if (c == MAVLINK_STX)
 284:./mavlink/common/../mavlink_helpers.h **** 		{
 285:./mavlink/common/../mavlink_helpers.h **** 			status->parse_state = MAVLINK_PARSE_STATE_GOT_STX;
 286:./mavlink/common/../mavlink_helpers.h **** 			rxmsg->len = 0;
 287:./mavlink/common/../mavlink_helpers.h **** 			rxmsg->magic = c;
 288:./mavlink/common/../mavlink_helpers.h **** 			mavlink_start_checksum(rxmsg);
 289:./mavlink/common/../mavlink_helpers.h **** 		}
 290:./mavlink/common/../mavlink_helpers.h **** 		break;
 291:./mavlink/common/../mavlink_helpers.h **** 
 292:./mavlink/common/../mavlink_helpers.h **** 	case MAVLINK_PARSE_STATE_GOT_STX:
 293:./mavlink/common/../mavlink_helpers.h **** 			if (status->msg_received 
 294:./mavlink/common/../mavlink_helpers.h **** /* Support shorter buffers than the
 295:./mavlink/common/../mavlink_helpers.h ****    default maximum packet size */
 296:./mavlink/common/../mavlink_helpers.h **** #if (MAVLINK_MAX_PAYLOAD_LEN < 255)
 297:./mavlink/common/../mavlink_helpers.h **** 				|| c > MAVLINK_MAX_PAYLOAD_LEN
 298:./mavlink/common/../mavlink_helpers.h **** #endif
 299:./mavlink/common/../mavlink_helpers.h **** 				)
 300:./mavlink/common/../mavlink_helpers.h **** 		{
 301:./mavlink/common/../mavlink_helpers.h **** 			status->buffer_overrun++;
 302:./mavlink/common/../mavlink_helpers.h **** 			status->parse_error++;
 303:./mavlink/common/../mavlink_helpers.h **** 			status->msg_received = 0;
 304:./mavlink/common/../mavlink_helpers.h **** 			status->parse_state = MAVLINK_PARSE_STATE_IDLE;
 305:./mavlink/common/../mavlink_helpers.h **** 		}
 306:./mavlink/common/../mavlink_helpers.h **** 		else
 307:./mavlink/common/../mavlink_helpers.h **** 		{
 308:./mavlink/common/../mavlink_helpers.h **** 			// NOT counting STX, LENGTH, SEQ, SYSID, COMPID, MSGID, CRC1 and CRC2
 309:./mavlink/common/../mavlink_helpers.h **** 			rxmsg->len = c;
 310:./mavlink/common/../mavlink_helpers.h **** 			status->packet_idx = 0;
 311:./mavlink/common/../mavlink_helpers.h **** 			mavlink_update_checksum(rxmsg, c);
 312:./mavlink/common/../mavlink_helpers.h **** 			status->parse_state = MAVLINK_PARSE_STATE_GOT_LENGTH;
 313:./mavlink/common/../mavlink_helpers.h **** 		}
 314:./mavlink/common/../mavlink_helpers.h **** 		break;
 315:./mavlink/common/../mavlink_helpers.h **** 
 316:./mavlink/common/../mavlink_helpers.h **** 	case MAVLINK_PARSE_STATE_GOT_LENGTH:
 317:./mavlink/common/../mavlink_helpers.h **** 		rxmsg->seq = c;
 318:./mavlink/common/../mavlink_helpers.h **** 		mavlink_update_checksum(rxmsg, c);
 319:./mavlink/common/../mavlink_helpers.h **** 		status->parse_state = MAVLINK_PARSE_STATE_GOT_SEQ;
 320:./mavlink/common/../mavlink_helpers.h **** 		break;
 321:./mavlink/common/../mavlink_helpers.h **** 
 322:./mavlink/common/../mavlink_helpers.h **** 	case MAVLINK_PARSE_STATE_GOT_SEQ:
 323:./mavlink/common/../mavlink_helpers.h **** 		rxmsg->sysid = c;
 324:./mavlink/common/../mavlink_helpers.h **** 		mavlink_update_checksum(rxmsg, c);
 325:./mavlink/common/../mavlink_helpers.h **** 		status->parse_state = MAVLINK_PARSE_STATE_GOT_SYSID;
 326:./mavlink/common/../mavlink_helpers.h **** 		break;
 327:./mavlink/common/../mavlink_helpers.h **** 
 328:./mavlink/common/../mavlink_helpers.h **** 	case MAVLINK_PARSE_STATE_GOT_SYSID:
 329:./mavlink/common/../mavlink_helpers.h **** 		rxmsg->compid = c;
 330:./mavlink/common/../mavlink_helpers.h **** 		mavlink_update_checksum(rxmsg, c);
 331:./mavlink/common/../mavlink_helpers.h **** 		status->parse_state = MAVLINK_PARSE_STATE_GOT_COMPID;
 332:./mavlink/common/../mavlink_helpers.h **** 		break;
 333:./mavlink/common/../mavlink_helpers.h **** 
 334:./mavlink/common/../mavlink_helpers.h **** 	case MAVLINK_PARSE_STATE_GOT_COMPID:
 335:./mavlink/common/../mavlink_helpers.h **** #ifdef MAVLINK_CHECK_MESSAGE_LENGTH
 336:./mavlink/common/../mavlink_helpers.h **** 	        if (rxmsg->len != MAVLINK_MESSAGE_LENGTH(c))
 337:./mavlink/common/../mavlink_helpers.h **** 		{
 338:./mavlink/common/../mavlink_helpers.h **** 			status->parse_error++;
 339:./mavlink/common/../mavlink_helpers.h **** 			status->parse_state = MAVLINK_PARSE_STATE_IDLE;
 340:./mavlink/common/../mavlink_helpers.h **** 			break;
 341:./mavlink/common/../mavlink_helpers.h **** 			if (c == MAVLINK_STX)
 342:./mavlink/common/../mavlink_helpers.h **** 			{
 343:./mavlink/common/../mavlink_helpers.h **** 				status->parse_state = MAVLINK_PARSE_STATE_GOT_STX;
 344:./mavlink/common/../mavlink_helpers.h **** 				mavlink_start_checksum(rxmsg);
 345:./mavlink/common/../mavlink_helpers.h **** 			}
 346:./mavlink/common/../mavlink_helpers.h **** 	        }
 347:./mavlink/common/../mavlink_helpers.h **** #endif
 348:./mavlink/common/../mavlink_helpers.h **** 		rxmsg->msgid = c;
 349:./mavlink/common/../mavlink_helpers.h **** 		mavlink_update_checksum(rxmsg, c);
 350:./mavlink/common/../mavlink_helpers.h **** 		if (rxmsg->len == 0)
 351:./mavlink/common/../mavlink_helpers.h **** 		{
 352:./mavlink/common/../mavlink_helpers.h **** 			status->parse_state = MAVLINK_PARSE_STATE_GOT_PAYLOAD;
 353:./mavlink/common/../mavlink_helpers.h **** 		}
 354:./mavlink/common/../mavlink_helpers.h **** 		else
 355:./mavlink/common/../mavlink_helpers.h **** 		{
 356:./mavlink/common/../mavlink_helpers.h **** 			status->parse_state = MAVLINK_PARSE_STATE_GOT_MSGID;
 357:./mavlink/common/../mavlink_helpers.h **** 		}
 358:./mavlink/common/../mavlink_helpers.h **** 		break;
 359:./mavlink/common/../mavlink_helpers.h **** 
 360:./mavlink/common/../mavlink_helpers.h **** 	case MAVLINK_PARSE_STATE_GOT_MSGID:
 361:./mavlink/common/../mavlink_helpers.h **** 		_MAV_PAYLOAD_NON_CONST(rxmsg)[status->packet_idx++] = (char)c;
 362:./mavlink/common/../mavlink_helpers.h **** 		mavlink_update_checksum(rxmsg, c);
 363:./mavlink/common/../mavlink_helpers.h **** 		if (status->packet_idx == rxmsg->len)
 364:./mavlink/common/../mavlink_helpers.h **** 		{
 365:./mavlink/common/../mavlink_helpers.h **** 			status->parse_state = MAVLINK_PARSE_STATE_GOT_PAYLOAD;
 366:./mavlink/common/../mavlink_helpers.h **** 		}
 367:./mavlink/common/../mavlink_helpers.h **** 		break;
 368:./mavlink/common/../mavlink_helpers.h **** 
 369:./mavlink/common/../mavlink_helpers.h **** 	case MAVLINK_PARSE_STATE_GOT_PAYLOAD:
 370:./mavlink/common/../mavlink_helpers.h **** #if MAVLINK_CRC_EXTRA
 371:./mavlink/common/../mavlink_helpers.h **** 		mavlink_update_checksum(rxmsg, MAVLINK_MESSAGE_CRC(rxmsg->msgid));
 372:./mavlink/common/../mavlink_helpers.h **** #endif
 373:./mavlink/common/../mavlink_helpers.h **** 		if (c != (rxmsg->checksum & 0xFF)) {
 374:./mavlink/common/../mavlink_helpers.h **** 			// Check first checksum byte
 375:./mavlink/common/../mavlink_helpers.h **** 			status->parse_error++;
 376:./mavlink/common/../mavlink_helpers.h **** 			status->msg_received = 0;
 377:./mavlink/common/../mavlink_helpers.h **** 			status->parse_state = MAVLINK_PARSE_STATE_IDLE;
 378:./mavlink/common/../mavlink_helpers.h **** 			if (c == MAVLINK_STX)
 379:./mavlink/common/../mavlink_helpers.h **** 			{
 380:./mavlink/common/../mavlink_helpers.h **** 				status->parse_state = MAVLINK_PARSE_STATE_GOT_STX;
 381:./mavlink/common/../mavlink_helpers.h **** 				rxmsg->len = 0;
 382:./mavlink/common/../mavlink_helpers.h **** 				mavlink_start_checksum(rxmsg);
 383:./mavlink/common/../mavlink_helpers.h **** 			}
 384:./mavlink/common/../mavlink_helpers.h **** 		}
 385:./mavlink/common/../mavlink_helpers.h **** 		else
 386:./mavlink/common/../mavlink_helpers.h **** 		{
 387:./mavlink/common/../mavlink_helpers.h **** 			status->parse_state = MAVLINK_PARSE_STATE_GOT_CRC1;
 388:./mavlink/common/../mavlink_helpers.h **** 			_MAV_PAYLOAD_NON_CONST(rxmsg)[status->packet_idx] = (char)c;
 389:./mavlink/common/../mavlink_helpers.h **** 		}
 390:./mavlink/common/../mavlink_helpers.h **** 		break;
 391:./mavlink/common/../mavlink_helpers.h **** 
 392:./mavlink/common/../mavlink_helpers.h **** 	case MAVLINK_PARSE_STATE_GOT_CRC1:
 393:./mavlink/common/../mavlink_helpers.h **** 		if (c != (rxmsg->checksum >> 8)) {
 394:./mavlink/common/../mavlink_helpers.h **** 			// Check second checksum byte
 395:./mavlink/common/../mavlink_helpers.h **** 			status->parse_error++;
 396:./mavlink/common/../mavlink_helpers.h **** 			status->msg_received = 0;
 397:./mavlink/common/../mavlink_helpers.h **** 			status->parse_state = MAVLINK_PARSE_STATE_IDLE;
 398:./mavlink/common/../mavlink_helpers.h **** 			if (c == MAVLINK_STX)
 399:./mavlink/common/../mavlink_helpers.h **** 			{
 400:./mavlink/common/../mavlink_helpers.h **** 				status->parse_state = MAVLINK_PARSE_STATE_GOT_STX;
 401:./mavlink/common/../mavlink_helpers.h **** 				rxmsg->len = 0;
 402:./mavlink/common/../mavlink_helpers.h **** 				mavlink_start_checksum(rxmsg);
 403:./mavlink/common/../mavlink_helpers.h **** 			}
 404:./mavlink/common/../mavlink_helpers.h **** 		}
 405:./mavlink/common/../mavlink_helpers.h **** 		else
 406:./mavlink/common/../mavlink_helpers.h **** 		{
 407:./mavlink/common/../mavlink_helpers.h **** 			// Successfully got message
 408:./mavlink/common/../mavlink_helpers.h **** 			status->msg_received = 1;
 288               		.loc 3 408 0
 289 0082 11E0      		ldi r17,lo8(1)
 290               	.LVL18:
 380:./mavlink/common/../mavlink_helpers.h **** 				rxmsg->len = 0;
 291               		.loc 3 380 0
 292 0084 02E0      		ldi r16,lo8(2)
 293               	.LBB108:
 294               	.LBB109:
 295               	.LBB110:
  36:./mavlink/common/../checksum.h **** }
  37:./mavlink/common/../checksum.h **** #endif
  38:./mavlink/common/../checksum.h **** 
  39:./mavlink/common/../checksum.h **** 
  40:./mavlink/common/../checksum.h **** /**
  41:./mavlink/common/../checksum.h ****  * @brief Initiliaze the buffer for the X.25 CRC
  42:./mavlink/common/../checksum.h ****  *
  43:./mavlink/common/../checksum.h ****  * @param crcAccum the 16 bit X.25 CRC
  44:./mavlink/common/../checksum.h ****  */
  45:./mavlink/common/../checksum.h **** static inline void crc_init(uint16_t* crcAccum)
  46:./mavlink/common/../checksum.h **** {
  47:./mavlink/common/../checksum.h ****         *crcAccum = X25_INIT_CRC;
 296               		.loc 1 47 0
 297 0086 6624      		clr r6
 298 0088 6A94      		dec r6
 299 008a 762C      		mov r7,r6
 300               	.LBE110:
 301               	.LBE109:
 302               	.LBE108:
 325:./mavlink/common/../mavlink_helpers.h **** 		break;
 303               		.loc 3 325 0
 304 008c 95E0      		ldi r25,lo8(5)
 305 008e 492E      		mov r4,r25
 319:./mavlink/common/../mavlink_helpers.h **** 		break;
 306               		.loc 3 319 0
 307 0090 23E0      		ldi r18,lo8(3)
 308 0092 322E      		mov r3,r18
 312:./mavlink/common/../mavlink_helpers.h **** 		}
 309               		.loc 3 312 0
 310 0094 34E0      		ldi r19,lo8(4)
 311 0096 232E      		mov r2,r19
 312               	.L11:
 313               	.LVL19:
 314               	.LBE107:
 315               	.LBE106:
 168:mavlink_interface.c **** 				if (mavlink_parse_char(MAVLINK_COMM_0, buf[i], &msg, &status)) {
 316               		.loc 2 168 0 discriminator 1
 317 0098 8A81      		ldd r24,Y+2
 318 009a 90E0      		ldi r25,0
 319 009c 9701      		movw r18,r14
 320 009e 2C19      		sub r18,r12
 321 00a0 3D09      		sbc r19,r13
 322               	.LVL20:
 323 00a2 2817      		cp r18,r24
 324 00a4 3907      		cpc r19,r25
 325 00a6 04F0      		brlt .+2
 326 00a8 00C0      		rjmp .L8
 169:mavlink_interface.c **** 					//gwinPrintf(GW1,"MAVLINK RECV %d: msg id=%d, sys id=%d\r\n", msg.seq, msg.msgid, msg.sysid);
 327               		.loc 2 169 0
 328 00aa F701      		movw r30,r14
 329 00ac 9191      		ld r25,Z+
 330 00ae 7F01      		movw r14,r30
 331               	.LVL21:
 332               	.LBB129:
 333               	.LBB128:
 277:./mavlink/common/../mavlink_helpers.h **** 
 334               		.loc 3 277 0
 335 00b0 1092 0000 		sts m_mavlink_status.2773,__zero_reg__
 279:./mavlink/common/../mavlink_helpers.h **** 	{
 336               		.loc 3 279 0
 337 00b4 E091 0000 		lds r30,m_mavlink_status.2773+3
 338 00b8 4E2F      		mov r20,r30
 339 00ba 50E0      		ldi r21,0
 340 00bc 4A30      		cpi r20,10
 341 00be 5105      		cpc r21,__zero_reg__
 342 00c0 00F0      		brlo .+2
 343 00c2 00C0      		rjmp .L12
 344 00c4 FA01      		movw r30,r20
 345 00c6 E050      		subi r30,lo8(-(gs(.L14)))
 346 00c8 F040      		sbci r31,hi8(-(gs(.L14)))
 347 00ca 0C94 0000 		jmp __tablejump2__
 348               		.section	.progmem.gcc_sw_table.mavlink_server,"a",@progbits
 349               		.p2align	1
 350               	.L14:
 351 0000 0000      		.word gs(.L13)
 352 0002 0000      		.word gs(.L13)
 353 0004 0000      		.word gs(.L15)
 354 0006 0000      		.word gs(.L16)
 355 0008 0000      		.word gs(.L17)
 356 000a 0000      		.word gs(.L18)
 357 000c 0000      		.word gs(.L19)
 358 000e 0000      		.word gs(.L20)
 359 0010 0000      		.word gs(.L21)
 360 0012 0000      		.word gs(.L22)
 361               		.section	.text.mavlink_server
 362               	.L13:
 283:./mavlink/common/../mavlink_helpers.h **** 		{
 363               		.loc 3 283 0
 364 00ce 9E3F      		cpi r25,lo8(-2)
 365 00d0 01F0      		breq .+2
 366 00d2 00C0      		rjmp .L12
 285:./mavlink/common/../mavlink_helpers.h **** 			rxmsg->len = 0;
 367               		.loc 3 285 0
 368 00d4 0093 0000 		sts m_mavlink_status.2773+3,r16
 286:./mavlink/common/../mavlink_helpers.h **** 			rxmsg->magic = c;
 369               		.loc 3 286 0
 370 00d8 1092 0000 		sts m_mavlink_buffer.2777+3,__zero_reg__
 287:./mavlink/common/../mavlink_helpers.h **** 			mavlink_start_checksum(rxmsg);
 371               		.loc 3 287 0
 372 00dc 9093 0000 		sts m_mavlink_buffer.2777+2,r25
 373               	.LVL22:
 374 00e0 00C0      		rjmp .L43
 375               	.LVL23:
 376               	.L15:
 309:./mavlink/common/../mavlink_helpers.h **** 			status->packet_idx = 0;
 377               		.loc 3 309 0
 378 00e2 9093 0000 		sts m_mavlink_buffer.2777+3,r25
 310:./mavlink/common/../mavlink_helpers.h **** 			mavlink_update_checksum(rxmsg, c);
 379               		.loc 3 310 0
 380 00e6 1092 0000 		sts m_mavlink_status.2773+4,__zero_reg__
 381               	.LVL24:
 382               	.LBB113:
 383               	.LBB114:
 203:./mavlink/common/../mavlink_helpers.h **** }
 384               		.loc 3 203 0
 385 00ea 60E0      		ldi r22,lo8(m_mavlink_buffer.2777)
 386 00ec 70E0      		ldi r23,hi8(m_mavlink_buffer.2777)
 387 00ee 892F      		mov r24,r25
 388 00f0 0E94 0000 		call crc_accumulate
 389               	.LVL25:
 390               	.LBE114:
 391               	.LBE113:
 312:./mavlink/common/../mavlink_helpers.h **** 		}
 392               		.loc 3 312 0
 393 00f4 2092 0000 		sts m_mavlink_status.2773+3,r2
 394 00f8 00C0      		rjmp .L12
 395               	.LVL26:
 396               	.L17:
 317:./mavlink/common/../mavlink_helpers.h **** 		mavlink_update_checksum(rxmsg, c);
 397               		.loc 3 317 0
 398 00fa 9093 0000 		sts m_mavlink_buffer.2777+4,r25
 399               	.LVL27:
 400               	.LBB115:
 401               	.LBB116:
 203:./mavlink/common/../mavlink_helpers.h **** }
 402               		.loc 3 203 0
 403 00fe 60E0      		ldi r22,lo8(m_mavlink_buffer.2777)
 404 0100 70E0      		ldi r23,hi8(m_mavlink_buffer.2777)
 405 0102 892F      		mov r24,r25
 406 0104 0E94 0000 		call crc_accumulate
 407               	.LVL28:
 408               	.LBE116:
 409               	.LBE115:
 319:./mavlink/common/../mavlink_helpers.h **** 		break;
 410               		.loc 3 319 0
 411 0108 3092 0000 		sts m_mavlink_status.2773+3,r3
 412 010c 00C0      		rjmp .L12
 413               	.LVL29:
 414               	.L16:
 323:./mavlink/common/../mavlink_helpers.h **** 		mavlink_update_checksum(rxmsg, c);
 415               		.loc 3 323 0
 416 010e 9093 0000 		sts m_mavlink_buffer.2777+5,r25
 417               	.LVL30:
 418               	.LBB117:
 419               	.LBB118:
 203:./mavlink/common/../mavlink_helpers.h **** }
 420               		.loc 3 203 0
 421 0112 60E0      		ldi r22,lo8(m_mavlink_buffer.2777)
 422 0114 70E0      		ldi r23,hi8(m_mavlink_buffer.2777)
 423 0116 892F      		mov r24,r25
 424 0118 0E94 0000 		call crc_accumulate
 425               	.LVL31:
 426               	.LBE118:
 427               	.LBE117:
 325:./mavlink/common/../mavlink_helpers.h **** 		break;
 428               		.loc 3 325 0
 429 011c 4092 0000 		sts m_mavlink_status.2773+3,r4
 430 0120 00C0      		rjmp .L12
 431               	.LVL32:
 432               	.L18:
 329:./mavlink/common/../mavlink_helpers.h **** 		mavlink_update_checksum(rxmsg, c);
 433               		.loc 3 329 0
 434 0122 9093 0000 		sts m_mavlink_buffer.2777+6,r25
 435               	.LVL33:
 436               	.LBB119:
 437               	.LBB120:
 203:./mavlink/common/../mavlink_helpers.h **** }
 438               		.loc 3 203 0
 439 0126 60E0      		ldi r22,lo8(m_mavlink_buffer.2777)
 440 0128 70E0      		ldi r23,hi8(m_mavlink_buffer.2777)
 441 012a 892F      		mov r24,r25
 442 012c 0E94 0000 		call crc_accumulate
 443               	.LVL34:
 444               	.LBE120:
 445               	.LBE119:
 331:./mavlink/common/../mavlink_helpers.h **** 		break;
 446               		.loc 3 331 0
 447 0130 F6E0      		ldi r31,lo8(6)
 448 0132 F093 0000 		sts m_mavlink_status.2773+3,r31
 449 0136 00C0      		rjmp .L12
 450               	.LVL35:
 451               	.L19:
 348:./mavlink/common/../mavlink_helpers.h **** 		mavlink_update_checksum(rxmsg, c);
 452               		.loc 3 348 0
 453 0138 9093 0000 		sts m_mavlink_buffer.2777+7,r25
 454               	.LVL36:
 455               	.LBB121:
 456               	.LBB122:
 203:./mavlink/common/../mavlink_helpers.h **** }
 457               		.loc 3 203 0
 458 013c 60E0      		ldi r22,lo8(m_mavlink_buffer.2777)
 459 013e 70E0      		ldi r23,hi8(m_mavlink_buffer.2777)
 460 0140 892F      		mov r24,r25
 461 0142 0E94 0000 		call crc_accumulate
 462               	.LVL37:
 463               	.LBE122:
 464               	.LBE121:
 350:./mavlink/common/../mavlink_helpers.h **** 		{
 465               		.loc 3 350 0
 466 0146 8091 0000 		lds r24,m_mavlink_buffer.2777+3
 467 014a 8111      		cpse r24,__zero_reg__
 468 014c 00C0      		rjmp .L24
 469               	.LVL38:
 470               	.L25:
 352:./mavlink/common/../mavlink_helpers.h **** 		}
 471               		.loc 3 352 0
 472 014e 88E0      		ldi r24,lo8(8)
 473 0150 8093 0000 		sts m_mavlink_status.2773+3,r24
 474 0154 00C0      		rjmp .L12
 475               	.LVL39:
 476               	.L24:
 356:./mavlink/common/../mavlink_helpers.h **** 		}
 477               		.loc 3 356 0
 478 0156 97E0      		ldi r25,lo8(7)
 479 0158 9093 0000 		sts m_mavlink_status.2773+3,r25
 480 015c 00C0      		rjmp .L12
 481               	.LVL40:
 482               	.L20:
 361:./mavlink/common/../mavlink_helpers.h **** 		mavlink_update_checksum(rxmsg, c);
 483               		.loc 3 361 0
 484 015e E091 0000 		lds r30,m_mavlink_status.2773+4
 485 0162 5524      		clr r5
 486 0164 5394      		inc r5
 487 0166 5E0E      		add r5,r30
 488 0168 5092 0000 		sts m_mavlink_status.2773+4,r5
 489 016c F0E0      		ldi r31,0
 490 016e E050      		subi r30,lo8(-(m_mavlink_buffer.2777+8))
 491 0170 F040      		sbci r31,hi8(-(m_mavlink_buffer.2777+8))
 492 0172 9083      		st Z,r25
 493               	.LVL41:
 494               	.LBB123:
 495               	.LBB124:
 203:./mavlink/common/../mavlink_helpers.h **** }
 496               		.loc 3 203 0
 497 0174 60E0      		ldi r22,lo8(m_mavlink_buffer.2777)
 498 0176 70E0      		ldi r23,hi8(m_mavlink_buffer.2777)
 499 0178 892F      		mov r24,r25
 500 017a 0E94 0000 		call crc_accumulate
 501               	.LVL42:
 502               	.LBE124:
 503               	.LBE123:
 363:./mavlink/common/../mavlink_helpers.h **** 		{
 504               		.loc 3 363 0
 505 017e 8091 0000 		lds r24,m_mavlink_buffer.2777+3
 506 0182 5812      		cpse r5,r24
 507 0184 00C0      		rjmp .L12
 508 0186 00C0      		rjmp .L25
 509               	.LVL43:
 510               	.L21:
 371:./mavlink/common/../mavlink_helpers.h **** #endif
 511               		.loc 3 371 0
 512 0188 E091 0000 		lds r30,m_mavlink_buffer.2777+7
 513 018c F0E0      		ldi r31,0
 514 018e E050      		subi r30,lo8(-(mavlink_message_crcs.2822))
 515 0190 F040      		sbci r31,hi8(-(mavlink_message_crcs.2822))
 516               	.LBB125:
 517               	.LBB126:
 203:./mavlink/common/../mavlink_helpers.h **** }
 518               		.loc 3 203 0
 519 0192 60E0      		ldi r22,lo8(m_mavlink_buffer.2777)
 520 0194 70E0      		ldi r23,hi8(m_mavlink_buffer.2777)
 521 0196 8081      		ld r24,Z
 522 0198 9B83      		std Y+3,r25
 523 019a 0E94 0000 		call crc_accumulate
 524               	.LVL44:
 525               	.LBE126:
 526               	.LBE125:
 373:./mavlink/common/../mavlink_helpers.h **** 			// Check first checksum byte
 527               		.loc 3 373 0
 528 019e 9B81      		ldd r25,Y+3
 529 01a0 492F      		mov r20,r25
 530 01a2 50E0      		ldi r21,0
 531 01a4 2091 0000 		lds r18,m_mavlink_buffer.2777
 532 01a8 3091 0000 		lds r19,m_mavlink_buffer.2777+1
 533 01ac 3327      		clr r19
 534 01ae 4217      		cp r20,r18
 535 01b0 5307      		cpc r21,r19
 536 01b2 01F0      		breq .L27
 537               	.LVL45:
 538               	.L41:
 377:./mavlink/common/../mavlink_helpers.h **** 			if (c == MAVLINK_STX)
 539               		.loc 3 377 0
 540 01b4 1093 0000 		sts m_mavlink_status.2773+3,r17
 378:./mavlink/common/../mavlink_helpers.h **** 			{
 541               		.loc 3 378 0
 542 01b8 9E3F      		cpi r25,lo8(-2)
 543 01ba 01F4      		brne .L12
 380:./mavlink/common/../mavlink_helpers.h **** 				rxmsg->len = 0;
 544               		.loc 3 380 0
 545 01bc 0093 0000 		sts m_mavlink_status.2773+3,r16
 381:./mavlink/common/../mavlink_helpers.h **** 				mavlink_start_checksum(rxmsg);
 546               		.loc 3 381 0
 547 01c0 1092 0000 		sts m_mavlink_buffer.2777+3,__zero_reg__
 548               	.L43:
 549               	.LVL46:
 550               	.LBB127:
 551               	.LBB112:
 552               	.LBB111:
 553               		.loc 1 47 0
 554 01c4 7092 0000 		sts m_mavlink_buffer.2777+1,r7
 555 01c8 6092 0000 		sts m_mavlink_buffer.2777,r6
 556 01cc 00C0      		rjmp .L12
 557               	.LVL47:
 558               	.L27:
 559               	.LBE111:
 560               	.LBE112:
 561               	.LBE127:
 387:./mavlink/common/../mavlink_helpers.h **** 			_MAV_PAYLOAD_NON_CONST(rxmsg)[status->packet_idx] = (char)c;
 562               		.loc 3 387 0
 563 01ce E9E0      		ldi r30,lo8(9)
 564 01d0 E093 0000 		sts m_mavlink_status.2773+3,r30
 388:./mavlink/common/../mavlink_helpers.h **** 		}
 565               		.loc 3 388 0
 566 01d4 E091 0000 		lds r30,m_mavlink_status.2773+4
 567 01d8 F0E0      		ldi r31,0
 568 01da E050      		subi r30,lo8(-(m_mavlink_buffer.2777+8))
 569 01dc F040      		sbci r31,hi8(-(m_mavlink_buffer.2777+8))
 570 01de 00C0      		rjmp .L42
 571               	.LVL48:
 572               	.L22:
 393:./mavlink/common/../mavlink_helpers.h **** 			// Check second checksum byte
 573               		.loc 3 393 0
 574 01e0 292F      		mov r18,r25
 575               	.LVL49:
 576 01e2 30E0      		ldi r19,0
 577 01e4 A090 0000 		lds r10,m_mavlink_buffer.2777+1
 578 01e8 B12C      		mov r11,__zero_reg__
 579 01ea 2A15      		cp r18,r10
 580 01ec 3B05      		cpc r19,r11
 581 01ee 01F4      		brne .L41
 582               	.LVL50:
 583               		.loc 3 408 0
 584 01f0 1093 0000 		sts m_mavlink_status.2773,r17
 409:./mavlink/common/../mavlink_helpers.h **** 			status->parse_state = MAVLINK_PARSE_STATE_IDLE;
 585               		.loc 3 409 0
 586 01f4 1093 0000 		sts m_mavlink_status.2773+3,r17
 410:./mavlink/common/../mavlink_helpers.h **** 			_MAV_PAYLOAD_NON_CONST(rxmsg)[status->packet_idx+1] = (char)c;
 587               		.loc 3 410 0
 588 01f8 E091 0000 		lds r30,m_mavlink_status.2773+4
 589 01fc F0E0      		ldi r31,0
 590 01fe E050      		subi r30,lo8(-(m_mavlink_buffer.2777+9))
 591 0200 F040      		sbci r31,hi8(-(m_mavlink_buffer.2777+9))
 592               	.LVL51:
 593               	.L42:
 594 0202 9083      		st Z,r25
 595               	.L12:
 596               	.LVL52:
 411:./mavlink/common/../mavlink_helpers.h **** 			memcpy(r_message, rxmsg, sizeof(mavlink_message_t));
 412:./mavlink/common/../mavlink_helpers.h **** 		}
 413:./mavlink/common/../mavlink_helpers.h **** 		break;
 414:./mavlink/common/../mavlink_helpers.h **** 	}
 415:./mavlink/common/../mavlink_helpers.h **** 
 416:./mavlink/common/../mavlink_helpers.h **** 	bufferIndex++;
 417:./mavlink/common/../mavlink_helpers.h **** 	// If a message has been sucessfully decoded, check index
 418:./mavlink/common/../mavlink_helpers.h **** 	if (status->msg_received == 1)
 597               		.loc 3 418 0
 598 0204 8091 0000 		lds r24,m_mavlink_status.2773
 599 0208 8130      		cpi r24,lo8(1)
 600 020a 01F4      		brne .L30
 419:./mavlink/common/../mavlink_helpers.h **** 	{
 420:./mavlink/common/../mavlink_helpers.h **** 		//while(status->current_seq != rxmsg->seq)
 421:./mavlink/common/../mavlink_helpers.h **** 		//{
 422:./mavlink/common/../mavlink_helpers.h **** 		//	status->packet_rx_drop_count++;
 423:./mavlink/common/../mavlink_helpers.h **** 		//               status->current_seq++;
 424:./mavlink/common/../mavlink_helpers.h **** 		//}
 425:./mavlink/common/../mavlink_helpers.h **** 		status->current_rx_seq = rxmsg->seq;
 601               		.loc 3 425 0
 602 020c 8091 0000 		lds r24,m_mavlink_buffer.2777+4
 603 0210 8093 0000 		sts m_mavlink_status.2773+5,r24
 426:./mavlink/common/../mavlink_helpers.h **** 		// Initial condition: If no packet has been received so far, drop count is undefined
 427:./mavlink/common/../mavlink_helpers.h **** 		if (status->packet_rx_success_count == 0) status->packet_rx_drop_count = 0;
 604               		.loc 3 427 0
 605 0214 8091 0000 		lds r24,m_mavlink_status.2773+7
 606 0218 9091 0000 		lds r25,m_mavlink_status.2773+7+1
 607 021c 0097      		sbiw r24,0
 608 021e 01F4      		brne .L31
 609 0220 1092 0000 		sts m_mavlink_status.2773+9+1,__zero_reg__
 610 0224 1092 0000 		sts m_mavlink_status.2773+9,__zero_reg__
 611               	.L31:
 428:./mavlink/common/../mavlink_helpers.h **** 		// Count this packet as received
 429:./mavlink/common/../mavlink_helpers.h **** 		status->packet_rx_success_count++;
 612               		.loc 3 429 0
 613 0228 0196      		adiw r24,1
 614 022a 9093 0000 		sts m_mavlink_status.2773+7+1,r25
 615 022e 8093 0000 		sts m_mavlink_status.2773+7,r24
 616               	.L30:
 430:./mavlink/common/../mavlink_helpers.h **** 	}
 431:./mavlink/common/../mavlink_helpers.h **** 
 432:./mavlink/common/../mavlink_helpers.h **** 	r_mavlink_status->current_rx_seq = status->current_rx_seq+1;
 433:./mavlink/common/../mavlink_helpers.h **** 	r_mavlink_status->packet_rx_success_count = status->packet_rx_success_count;
 434:./mavlink/common/../mavlink_helpers.h **** 	r_mavlink_status->packet_rx_drop_count = status->parse_error;
 435:./mavlink/common/../mavlink_helpers.h **** 	status->parse_error = 0;
 617               		.loc 3 435 0
 618 0232 1092 0000 		sts m_mavlink_status.2773+2,__zero_reg__
 619 0236 00C0      		rjmp .L11
 620               	.LVL53:
 621               	.L8:
 622               	.LBE128:
 623               	.LBE129:
 624               	.LBE105:
 625               		.loc 2 207 0
 626 0238 0FB6      		in __tmp_reg__,__SREG__
 627 023a F894      		cli
 628 023c 9EBE      		out __SP_H__,r9
 629 023e 0FBE      		out __SREG__,__tmp_reg__
 630 0240 8DBE      		out __SP_L__,r8
 631               	/* epilogue start */
 632 0242 0F90      		pop __tmp_reg__
 633 0244 0F90      		pop __tmp_reg__
 634 0246 0F90      		pop __tmp_reg__
 635 0248 DF91      		pop r29
 636 024a CF91      		pop r28
 637 024c 1F91      		pop r17
 638 024e 0F91      		pop r16
 639 0250 FF90      		pop r15
 640 0252 EF90      		pop r14
 641 0254 DF90      		pop r13
 642 0256 CF90      		pop r12
 643               	.LVL54:
 644 0258 BF90      		pop r11
 645 025a AF90      		pop r10
 646 025c 9F90      		pop r9
 647 025e 8F90      		pop r8
 648 0260 7F90      		pop r7
 649 0262 6F90      		pop r6
 650 0264 5F90      		pop r5
 651 0266 4F90      		pop r4
 652 0268 3F90      		pop r3
 653 026a 2F90      		pop r2
 654 026c 0895      		ret
 655               		.cfi_endproc
 656               	.LFE1423:
 658               		.section	.text.mavlink_heart,"ax",@progbits
 659               	.global	mavlink_heart
 661               	mavlink_heart:
 662               	.LFB1424:
 208:mavlink_interface.c **** 
 209:mavlink_interface.c **** 
 210:mavlink_interface.c **** void mavlink_heart(uint8_t targetAddress) {
 663               		.loc 2 210 0
 664               		.cfi_startproc
 665               	.LVL55:
 666 0000 8F92      		push r8
 667               	.LCFI24:
 668               		.cfi_def_cfa_offset 3
 669               		.cfi_offset 8, -2
 670 0002 9F92      		push r9
 671               	.LCFI25:
 672               		.cfi_def_cfa_offset 4
 673               		.cfi_offset 9, -3
 674 0004 AF92      		push r10
 675               	.LCFI26:
 676               		.cfi_def_cfa_offset 5
 677               		.cfi_offset 10, -4
 678 0006 BF92      		push r11
 679               	.LCFI27:
 680               		.cfi_def_cfa_offset 6
 681               		.cfi_offset 11, -5
 682 0008 DF92      		push r13
 683               	.LCFI28:
 684               		.cfi_def_cfa_offset 7
 685               		.cfi_offset 13, -6
 686 000a EF92      		push r14
 687               	.LCFI29:
 688               		.cfi_def_cfa_offset 8
 689               		.cfi_offset 14, -7
 690 000c FF92      		push r15
 691               	.LCFI30:
 692               		.cfi_def_cfa_offset 9
 693               		.cfi_offset 15, -8
 694 000e 0F93      		push r16
 695               	.LCFI31:
 696               		.cfi_def_cfa_offset 10
 697               		.cfi_offset 16, -9
 698 0010 1F93      		push r17
 699               	.LCFI32:
 700               		.cfi_def_cfa_offset 11
 701               		.cfi_offset 17, -10
 702 0012 CF93      		push r28
 703               	.LCFI33:
 704               		.cfi_def_cfa_offset 12
 705               		.cfi_offset 28, -11
 706 0014 DF93      		push r29
 707               	.LCFI34:
 708               		.cfi_def_cfa_offset 13
 709               		.cfi_offset 29, -12
 710 0016 CDB7      		in r28,__SP_L__
 711 0018 DEB7      		in r29,__SP_H__
 712               	.LCFI35:
 713               		.cfi_def_cfa_register 28
 714 001a C751      		subi r28,23
 715 001c D240      		sbci r29,2
 716               	.LCFI36:
 717               		.cfi_def_cfa_offset 548
 718 001e 0FB6      		in __tmp_reg__,__SREG__
 719 0020 F894      		cli
 720 0022 DEBF      		out __SP_H__,r29
 721 0024 0FBE      		out __SREG__,__tmp_reg__
 722 0026 CDBF      		out __SP_L__,r28
 723               	/* prologue: function */
 724               	/* frame size = 535 */
 725               	/* stack size = 546 */
 726               	.L__stack_usage = 546
 727 0028 D82E      		mov r13,r24
 211:mavlink_interface.c **** 
 212:mavlink_interface.c **** 	mavlink_system.sysid = 20;                   ///< ID 20 for this airplane
 728               		.loc 2 212 0
 729 002a 94E1      		ldi r25,lo8(20)
 730 002c 9093 0000 		sts mavlink_system,r25
 213:mavlink_interface.c **** 	mavlink_system.compid = MAV_COMP_ID_IMU; ///< The component sending the message is the IMU, it cou
 731               		.loc 2 213 0
 732 0030 88EC      		ldi r24,lo8(-56)
 733               	.LVL56:
 734 0032 8093 0000 		sts mavlink_system+1,r24
 214:mavlink_interface.c **** 	mavlink_system.type = MAV_TYPE_GENERIC; ///< This system is an airplane / fixed wing
 735               		.loc 2 214 0
 736 0036 1092 0000 		sts mavlink_system+2,__zero_reg__
 215:mavlink_interface.c **** 
 216:mavlink_interface.c **** 	// Initialize the required buffers
 217:mavlink_interface.c **** 	mavlink_message_t msg;
 218:mavlink_interface.c **** 	uint8_t buf[MAVLINK_MAX_PACKET_LEN];
 219:mavlink_interface.c **** 
 220:mavlink_interface.c **** // Pack the message
 221:mavlink_interface.c **** 	mavlink_msg_heartbeat_pack(mavlink_system.sysid, mavlink_system.compid,
 737               		.loc 2 221 0
 738 003a 2091 0000 		lds r18,system_state
 739 003e 3091 0000 		lds r19,system_mode
 740 0042 4091 0000 		lds r20,autopilot_type
 741 0046 5091 0000 		lds r21,system_type
 742               	.LVL57:
 743               	.LBB149:
 744               	.LBB150:
 745               		.file 4 "./mavlink/common/./mavlink_msg_heartbeat.h"
   1:./mavlink/common/./mavlink_msg_heartbeat.h **** // MESSAGE HEARTBEAT PACKING
   2:./mavlink/common/./mavlink_msg_heartbeat.h **** 
   3:./mavlink/common/./mavlink_msg_heartbeat.h **** #define MAVLINK_MSG_ID_HEARTBEAT 0
   4:./mavlink/common/./mavlink_msg_heartbeat.h **** 
   5:./mavlink/common/./mavlink_msg_heartbeat.h **** typedef struct __mavlink_heartbeat_t
   6:./mavlink/common/./mavlink_msg_heartbeat.h **** {
   7:./mavlink/common/./mavlink_msg_heartbeat.h ****  uint32_t custom_mode; ///< A bitfield for use for autopilot-specific flags.
   8:./mavlink/common/./mavlink_msg_heartbeat.h ****  uint8_t type; ///< Type of the MAV (quadrotor, helicopter, etc., up to 15 types, defined in MAV_TY
   9:./mavlink/common/./mavlink_msg_heartbeat.h ****  uint8_t autopilot; ///< Autopilot type / class. defined in MAV_AUTOPILOT ENUM
  10:./mavlink/common/./mavlink_msg_heartbeat.h ****  uint8_t base_mode; ///< System mode bitfield, see MAV_MODE_FLAG ENUM in mavlink/include/mavlink_ty
  11:./mavlink/common/./mavlink_msg_heartbeat.h ****  uint8_t system_status; ///< System status flag, see MAV_STATE ENUM
  12:./mavlink/common/./mavlink_msg_heartbeat.h ****  uint8_t mavlink_version; ///< MAVLink version, not writable by user, gets added by protocol becaus
  13:./mavlink/common/./mavlink_msg_heartbeat.h **** } mavlink_heartbeat_t;
  14:./mavlink/common/./mavlink_msg_heartbeat.h **** 
  15:./mavlink/common/./mavlink_msg_heartbeat.h **** #define MAVLINK_MSG_ID_HEARTBEAT_LEN 9
  16:./mavlink/common/./mavlink_msg_heartbeat.h **** #define MAVLINK_MSG_ID_0_LEN 9
  17:./mavlink/common/./mavlink_msg_heartbeat.h **** 
  18:./mavlink/common/./mavlink_msg_heartbeat.h **** #define MAVLINK_MSG_ID_HEARTBEAT_CRC 50
  19:./mavlink/common/./mavlink_msg_heartbeat.h **** #define MAVLINK_MSG_ID_0_CRC 50
  20:./mavlink/common/./mavlink_msg_heartbeat.h **** 
  21:./mavlink/common/./mavlink_msg_heartbeat.h **** 
  22:./mavlink/common/./mavlink_msg_heartbeat.h **** 
  23:./mavlink/common/./mavlink_msg_heartbeat.h **** #define MAVLINK_MESSAGE_INFO_HEARTBEAT { \
  24:./mavlink/common/./mavlink_msg_heartbeat.h **** 	"HEARTBEAT", \
  25:./mavlink/common/./mavlink_msg_heartbeat.h **** 	6, \
  26:./mavlink/common/./mavlink_msg_heartbeat.h **** 	{  { "custom_mode", NULL, MAVLINK_TYPE_UINT32_T, 0, 0, offsetof(mavlink_heartbeat_t, custom_mode) 
  27:./mavlink/common/./mavlink_msg_heartbeat.h ****          { "type", NULL, MAVLINK_TYPE_UINT8_T, 0, 4, offsetof(mavlink_heartbeat_t, type) }, \
  28:./mavlink/common/./mavlink_msg_heartbeat.h ****          { "autopilot", NULL, MAVLINK_TYPE_UINT8_T, 0, 5, offsetof(mavlink_heartbeat_t, autopilot) 
  29:./mavlink/common/./mavlink_msg_heartbeat.h ****          { "base_mode", NULL, MAVLINK_TYPE_UINT8_T, 0, 6, offsetof(mavlink_heartbeat_t, base_mode) 
  30:./mavlink/common/./mavlink_msg_heartbeat.h ****          { "system_status", NULL, MAVLINK_TYPE_UINT8_T, 0, 7, offsetof(mavlink_heartbeat_t, system_
  31:./mavlink/common/./mavlink_msg_heartbeat.h ****          { "mavlink_version", NULL, MAVLINK_TYPE_UINT8_T, 0, 8, offsetof(mavlink_heartbeat_t, mavli
  32:./mavlink/common/./mavlink_msg_heartbeat.h ****          } \
  33:./mavlink/common/./mavlink_msg_heartbeat.h **** }
  34:./mavlink/common/./mavlink_msg_heartbeat.h **** 
  35:./mavlink/common/./mavlink_msg_heartbeat.h **** 
  36:./mavlink/common/./mavlink_msg_heartbeat.h **** /**
  37:./mavlink/common/./mavlink_msg_heartbeat.h ****  * @brief Pack a heartbeat message
  38:./mavlink/common/./mavlink_msg_heartbeat.h ****  * @param system_id ID of this system
  39:./mavlink/common/./mavlink_msg_heartbeat.h ****  * @param component_id ID of this component (e.g. 200 for IMU)
  40:./mavlink/common/./mavlink_msg_heartbeat.h ****  * @param msg The MAVLink message to compress the data into
  41:./mavlink/common/./mavlink_msg_heartbeat.h ****  *
  42:./mavlink/common/./mavlink_msg_heartbeat.h ****  * @param type Type of the MAV (quadrotor, helicopter, etc., up to 15 types, defined in MAV_TYPE EN
  43:./mavlink/common/./mavlink_msg_heartbeat.h ****  * @param autopilot Autopilot type / class. defined in MAV_AUTOPILOT ENUM
  44:./mavlink/common/./mavlink_msg_heartbeat.h ****  * @param base_mode System mode bitfield, see MAV_MODE_FLAG ENUM in mavlink/include/mavlink_types.h
  45:./mavlink/common/./mavlink_msg_heartbeat.h ****  * @param custom_mode A bitfield for use for autopilot-specific flags.
  46:./mavlink/common/./mavlink_msg_heartbeat.h ****  * @param system_status System status flag, see MAV_STATE ENUM
  47:./mavlink/common/./mavlink_msg_heartbeat.h ****  * @return length of the message in bytes (excluding serial stream start sign)
  48:./mavlink/common/./mavlink_msg_heartbeat.h ****  */
  49:./mavlink/common/./mavlink_msg_heartbeat.h **** static inline uint16_t mavlink_msg_heartbeat_pack(uint8_t system_id, uint8_t component_id, mavlink_
  50:./mavlink/common/./mavlink_msg_heartbeat.h **** 						       uint8_t type, uint8_t autopilot, uint8_t base_mode, uint32_t custom_mode, uint8_t syst
  51:./mavlink/common/./mavlink_msg_heartbeat.h **** {
  52:./mavlink/common/./mavlink_msg_heartbeat.h **** #if MAVLINK_NEED_BYTE_SWAP || !MAVLINK_ALIGNED_FIELDS
  53:./mavlink/common/./mavlink_msg_heartbeat.h **** 	char buf[MAVLINK_MSG_ID_HEARTBEAT_LEN];
  54:./mavlink/common/./mavlink_msg_heartbeat.h **** 	_mav_put_uint32_t(buf, 0, custom_mode);
  55:./mavlink/common/./mavlink_msg_heartbeat.h **** 	_mav_put_uint8_t(buf, 4, type);
  56:./mavlink/common/./mavlink_msg_heartbeat.h **** 	_mav_put_uint8_t(buf, 5, autopilot);
  57:./mavlink/common/./mavlink_msg_heartbeat.h **** 	_mav_put_uint8_t(buf, 6, base_mode);
  58:./mavlink/common/./mavlink_msg_heartbeat.h **** 	_mav_put_uint8_t(buf, 7, system_status);
  59:./mavlink/common/./mavlink_msg_heartbeat.h **** 	_mav_put_uint8_t(buf, 8, 3);
  60:./mavlink/common/./mavlink_msg_heartbeat.h **** 
  61:./mavlink/common/./mavlink_msg_heartbeat.h ****         memcpy(_MAV_PAYLOAD_NON_CONST(msg), buf, MAVLINK_MSG_ID_HEARTBEAT_LEN);
  62:./mavlink/common/./mavlink_msg_heartbeat.h **** #else
  63:./mavlink/common/./mavlink_msg_heartbeat.h **** 	mavlink_heartbeat_t packet;
  64:./mavlink/common/./mavlink_msg_heartbeat.h **** 	packet.custom_mode = custom_mode;
  65:./mavlink/common/./mavlink_msg_heartbeat.h **** 	packet.type = type;
  66:./mavlink/common/./mavlink_msg_heartbeat.h **** 	packet.autopilot = autopilot;
  67:./mavlink/common/./mavlink_msg_heartbeat.h **** 	packet.base_mode = base_mode;
  68:./mavlink/common/./mavlink_msg_heartbeat.h **** 	packet.system_status = system_status;
  69:./mavlink/common/./mavlink_msg_heartbeat.h **** 	packet.mavlink_version = 3;
  70:./mavlink/common/./mavlink_msg_heartbeat.h **** 
  71:./mavlink/common/./mavlink_msg_heartbeat.h ****         memcpy(_MAV_PAYLOAD_NON_CONST(msg), &packet, MAVLINK_MSG_ID_HEARTBEAT_LEN);
 746               		.loc 4 71 0
 747 004a 8090 0000 		lds r8,custom_mode
 748 004e 9090 0000 		lds r9,custom_mode+1
 749 0052 A090 0000 		lds r10,custom_mode+2
 750 0056 B090 0000 		lds r11,custom_mode+3
 751 005a 8986      		std Y+9,r8
 752 005c 9A86      		std Y+10,r9
 753 005e AB86      		std Y+11,r10
 754 0060 BC86      		std Y+12,r11
 755 0062 5D87      		std Y+13,r21
 756 0064 4E87      		std Y+14,r20
 757 0066 3F87      		std Y+15,r19
 758 0068 288B      		std Y+16,r18
 759 006a 23E0      		ldi r18,lo8(3)
 760               	.LVL58:
 761 006c 298B      		std Y+17,r18
  72:./mavlink/common/./mavlink_msg_heartbeat.h **** #endif
  73:./mavlink/common/./mavlink_msg_heartbeat.h **** 
  74:./mavlink/common/./mavlink_msg_heartbeat.h **** 	msg->msgid = MAVLINK_MSG_ID_HEARTBEAT;
 762               		.loc 4 74 0
 763 006e 1886      		std Y+8,__zero_reg__
 764               	.LVL59:
 765               	.LBB151:
 766               	.LBB152:
 767               	.LBB153:
  76:./mavlink/common/../mavlink_helpers.h **** 	msg->len = length;
 768               		.loc 3 76 0
 769 0070 2EEF      		ldi r18,lo8(-2)
 770 0072 2B83      		std Y+3,r18
  77:./mavlink/common/../mavlink_helpers.h **** 	msg->sysid = system_id;
 771               		.loc 3 77 0
 772 0074 29E0      		ldi r18,lo8(9)
 773 0076 2C83      		std Y+4,r18
  78:./mavlink/common/../mavlink_helpers.h **** 	msg->compid = component_id;
 774               		.loc 3 78 0
 775 0078 9E83      		std Y+6,r25
  79:./mavlink/common/../mavlink_helpers.h **** 	// One sequence number per component
 776               		.loc 3 79 0
 777 007a 8F83      		std Y+7,r24
 778               	.LVL60:
  81:./mavlink/common/../mavlink_helpers.h **** 	mavlink_get_channel_status(chan)->current_tx_seq = mavlink_get_channel_status(chan)->current_tx_se
 779               		.loc 3 81 0
 780 007c 8091 0000 		lds r24,m_mavlink_status.2773+6
 781 0080 8D83      		std Y+5,r24
 782               	.LVL61:
  82:./mavlink/common/../mavlink_helpers.h **** 	msg->checksum = crc_calculate(((const uint8_t*)(msg)) + 3, MAVLINK_CORE_HEADER_LEN);
 783               		.loc 3 82 0
 784 0082 8F5F      		subi r24,lo8(-(1))
 785 0084 8093 0000 		sts m_mavlink_status.2773+6,r24
 786               	.LVL62:
 787               	.LBB154:
 788               	.LBB155:
 789               	.LBB156:
 790               	.LBB157:
 791               		.loc 1 47 0
 792 0088 8FEF      		ldi r24,lo8(-1)
 793 008a 9FEF      		ldi r25,lo8(-1)
 794 008c CF5E      		subi r28,lo8(-273)
 795 008e DE4F      		sbci r29,hi8(-273)
 796 0090 9983      		std Y+1,r25
 797 0092 8883      		st Y,r24
 798 0094 C151      		subi r28,lo8(273)
 799 0096 D140      		sbci r29,hi8(273)
 800 0098 7E01      		movw r14,r28
 801 009a 84E0      		ldi r24,4
 802 009c E80E      		add r14,r24
 803 009e F11C      		adc r15,__zero_reg__
 804 00a0 8E01      		movw r16,r28
 805 00a2 075F      		subi r16,-9
 806 00a4 1F4F      		sbci r17,-1
 807               	.LVL63:
 808               	.L45:
 809               	.LBE157:
 810               	.LBE156:
  48:./mavlink/common/../checksum.h **** }
  49:./mavlink/common/../checksum.h **** 
  50:./mavlink/common/../checksum.h **** 
  51:./mavlink/common/../checksum.h **** /**
  52:./mavlink/common/../checksum.h ****  * @brief Calculates the X.25 checksum on a byte buffer
  53:./mavlink/common/../checksum.h ****  *
  54:./mavlink/common/../checksum.h ****  * @param  pBuffer buffer containing the byte array to hash
  55:./mavlink/common/../checksum.h ****  * @param  length  length of the byte array
  56:./mavlink/common/../checksum.h ****  * @return the checksum over the buffer bytes
  57:./mavlink/common/../checksum.h ****  **/
  58:./mavlink/common/../checksum.h **** static inline uint16_t crc_calculate(const uint8_t* pBuffer, uint16_t length)
  59:./mavlink/common/../checksum.h **** {
  60:./mavlink/common/../checksum.h ****         uint16_t crcTmp;
  61:./mavlink/common/../checksum.h ****         crc_init(&crcTmp);
  62:./mavlink/common/../checksum.h **** 	while (length--) {
 811               		.loc 1 62 0
 812 00a6 E016      		cp r14,r16
 813 00a8 F106      		cpc r15,r17
 814 00aa 01F0      		breq .L49
 815               	.LVL64:
  63:./mavlink/common/../checksum.h ****                 crc_accumulate(*pBuffer++, &crcTmp);
 816               		.loc 1 63 0
 817 00ac BE01      		movw r22,r28
 818 00ae 6F5E      		subi r22,-17
 819 00b0 7E4F      		sbci r23,-2
 820 00b2 F701      		movw r30,r14
 821 00b4 8191      		ld r24,Z+
 822               	.LVL65:
 823 00b6 7F01      		movw r14,r30
 824 00b8 0E94 0000 		call crc_accumulate
 825               	.LVL66:
 826 00bc 00C0      		rjmp .L45
 827               	.L49:
  64:./mavlink/common/../checksum.h ****         }
  65:./mavlink/common/../checksum.h ****         return crcTmp;
 828               		.loc 1 65 0
 829 00be CF5E      		subi r28,lo8(-273)
 830 00c0 DE4F      		sbci r29,hi8(-273)
 831 00c2 8881      		ld r24,Y
 832 00c4 9981      		ldd r25,Y+1
 833 00c6 C151      		subi r28,lo8(273)
 834 00c8 D140      		sbci r29,hi8(273)
 835               	.LBE155:
 836               	.LBE154:
  83:./mavlink/common/../mavlink_helpers.h **** 	crc_accumulate_buffer(&msg->checksum, _MAV_PAYLOAD(msg), msg->len);
 837               		.loc 3 83 0
 838 00ca 9A83      		std Y+2,r25
 839 00cc 8983      		std Y+1,r24
  84:./mavlink/common/../mavlink_helpers.h **** #if MAVLINK_CRC_EXTRA
 840               		.loc 3 84 0
 841 00ce EC80      		ldd r14,Y+4
 842               	.LVL67:
 843 00d0 5801      		movw r10,r16
 844 00d2 F12C      		mov r15,__zero_reg__
 845               	.LVL68:
 846               	.L47:
 847               	.LBB158:
 848               	.LBB159:
  66:./mavlink/common/../checksum.h **** }
  67:./mavlink/common/../checksum.h **** 
  68:./mavlink/common/../checksum.h **** 
  69:./mavlink/common/../checksum.h **** /**
  70:./mavlink/common/../checksum.h ****  * @brief Accumulate the X.25 CRC by adding an array of bytes
  71:./mavlink/common/../checksum.h ****  *
  72:./mavlink/common/../checksum.h ****  * The checksum function adds the hash of one char at a time to the
  73:./mavlink/common/../checksum.h ****  * 16 bit checksum (uint16_t).
  74:./mavlink/common/../checksum.h ****  *
  75:./mavlink/common/../checksum.h ****  * @param data new bytes to hash
  76:./mavlink/common/../checksum.h ****  * @param crcAccum the already accumulated checksum
  77:./mavlink/common/../checksum.h ****  **/
  78:./mavlink/common/../checksum.h **** static inline void crc_accumulate_buffer(uint16_t *crcAccum, const char *pBuffer, uint16_t length)
  79:./mavlink/common/../checksum.h **** {
  80:./mavlink/common/../checksum.h **** 	const uint8_t *p = (const uint8_t *)pBuffer;
  81:./mavlink/common/../checksum.h **** 	while (length--) {
  82:./mavlink/common/../checksum.h ****                 crc_accumulate(*p++, crcAccum);
 849               		.loc 1 82 0
 850 00d4 BE01      		movw r22,r28
 851 00d6 6F5F      		subi r22,-1
 852 00d8 7F4F      		sbci r23,-1
  81:./mavlink/common/../checksum.h ****                 crc_accumulate(*p++, crcAccum);
 853               		.loc 1 81 0
 854 00da E114      		cp r14,__zero_reg__
 855 00dc F104      		cpc r15,__zero_reg__
 856 00de 01F0      		breq .L50
 857               	.LVL69:
 858               		.loc 1 82 0
 859 00e0 F501      		movw r30,r10
 860 00e2 8191      		ld r24,Z+
 861               	.LVL70:
 862 00e4 5F01      		movw r10,r30
 863 00e6 0E94 0000 		call crc_accumulate
 864               	.LVL71:
 865 00ea F1E0      		ldi r31,1
 866 00ec EF1A      		sub r14,r31
 867 00ee F108      		sbc r15,__zero_reg__
 868               	.LVL72:
 869 00f0 00C0      		rjmp .L47
 870               	.LVL73:
 871               	.L50:
 872               	.LBE159:
 873               	.LBE158:
  86:./mavlink/common/../mavlink_helpers.h **** #endif
 874               		.loc 3 86 0
 875 00f2 82E3      		ldi r24,lo8(50)
 876 00f4 0E94 0000 		call crc_accumulate
 877               	.LVL74:
  88:./mavlink/common/../mavlink_helpers.h **** 	mavlink_ck_b(msg) = (uint8_t)(msg->checksum >> 8);
 878               		.loc 3 88 0
 879 00f8 8C81      		ldd r24,Y+4
 880 00fa F801      		movw r30,r16
 881 00fc E80F      		add r30,r24
 882 00fe F11D      		adc r31,__zero_reg__
 883 0100 8981      		ldd r24,Y+1
 884 0102 8083      		st Z,r24
  89:./mavlink/common/../mavlink_helpers.h **** 
 885               		.loc 3 89 0
 886 0104 8C81      		ldd r24,Y+4
 887 0106 FE01      		movw r30,r28
 888 0108 E80F      		add r30,r24
 889 010a F11D      		adc r31,__zero_reg__
 890 010c 8A81      		ldd r24,Y+2
 891 010e 8287      		std Z+10,r24
 892               	.LVL75:
 893               	.LBE153:
 894               	.LBE152:
 895               	.LBE151:
 896               	.LBE150:
 897               	.LBE149:
 898               	.LBB160:
 899               	.LBB161:
 176:./mavlink/common/../mavlink_helpers.h **** 
 900               		.loc 3 176 0
 901 0110 0C81      		ldd r16,Y+4
 902 0112 10E0      		ldi r17,0
 903 0114 7801      		movw r14,r16
 904               	.LVL76:
 905 0116 86E0      		ldi r24,6
 906 0118 E80E      		add r14,r24
 907 011a F11C      		adc r15,__zero_reg__
 908 011c A701      		movw r20,r14
 909 011e BE01      		movw r22,r28
 910 0120 6D5F      		subi r22,-3
 911 0122 7F4F      		sbci r23,-1
 912 0124 CE01      		movw r24,r28
 913 0126 8F5E      		subi r24,-17
 914 0128 9E4F      		sbci r25,-2
 915 012a 0E94 0000 		call memcpy
 916               	.LVL77:
 178:./mavlink/common/../mavlink_helpers.h **** 
 917               		.loc 3 178 0
 918 012e E1E1      		ldi r30,lo8(17)
 919 0130 F1E0      		ldi r31,lo8(1)
 920 0132 EC0F      		add r30,r28
 921 0134 FD1F      		adc r31,r29
 922 0136 EE0D      		add r30,r14
 923 0138 FF1D      		adc r31,r15
 924               	.LVL78:
 180:./mavlink/common/../mavlink_helpers.h **** 	ck[1] = (uint8_t)(msg->checksum >> 8);
 925               		.loc 3 180 0
 926 013a 9981      		ldd r25,Y+1
 927 013c 8A81      		ldd r24,Y+2
 928 013e 9083      		st Z,r25
 181:./mavlink/common/../mavlink_helpers.h **** 
 929               		.loc 3 181 0
 930 0140 8183      		std Z+1,r24
 183:./mavlink/common/../mavlink_helpers.h **** }
 931               		.loc 3 183 0
 932 0142 085F      		subi r16,-8
 933 0144 1F4F      		sbci r17,-1
 934               	.LBE161:
 935               	.LBE160:
 222:mavlink_interface.c **** 			&msg, system_type, autopilot_type, system_mode, custom_mode,
 223:mavlink_interface.c **** 			system_state);
 224:mavlink_interface.c **** 
 225:mavlink_interface.c **** // Copy the message to the send buffer
 226:mavlink_interface.c **** 	uint16_t len = mavlink_msg_to_send_buffer(buf, &msg);
 227:mavlink_interface.c **** 
 228:mavlink_interface.c **** // Send the message with the standard UART send function
 229:mavlink_interface.c **** // uart0_send might be named differently depending on
 230:mavlink_interface.c **** // the individual microcontroller / library in use.
 231:mavlink_interface.c **** //uart0_send(buf, len);
 232:mavlink_interface.c **** 
 233:mavlink_interface.c **** //	print_message(&msg);
 234:mavlink_interface.c **** 
 235:mavlink_interface.c **** 
 236:mavlink_interface.c **** 	print_raw(buf, len);
 936               		.loc 2 236 0
 937 0146 B801      		movw r22,r16
 938 0148 CE01      		movw r24,r28
 939 014a 8F5E      		subi r24,-17
 940 014c 9E4F      		sbci r25,-2
 941 014e 0E94 0000 		call print_raw
 942               	.LVL79:
 943               	.LBB162:
 944               	.LBB163:
 137:mavlink_interface.c **** 
 945               		.loc 2 137 0
 946 0152 4D2D      		mov r20,r13
 947 0154 602F      		mov r22,r16
 948 0156 CE01      		movw r24,r28
 949 0158 8F5E      		subi r24,-17
 950 015a 9E4F      		sbci r25,-2
 951 015c 0E94 0000 		call RHReliableDatagram_sendtoWait
 952               	.LVL80:
 953               	/* epilogue start */
 954               	.LBE163:
 955               	.LBE162:
 237:mavlink_interface.c **** 	mavlink_reliable_send(buf, len, targetAddress);
 238:mavlink_interface.c **** 
 239:mavlink_interface.c **** }
 956               		.loc 2 239 0
 957 0160 C95E      		subi r28,-23
 958 0162 DD4F      		sbci r29,-3
 959 0164 0FB6      		in __tmp_reg__,__SREG__
 960 0166 F894      		cli
 961 0168 DEBF      		out __SP_H__,r29
 962 016a 0FBE      		out __SREG__,__tmp_reg__
 963 016c CDBF      		out __SP_L__,r28
 964 016e DF91      		pop r29
 965 0170 CF91      		pop r28
 966 0172 1F91      		pop r17
 967 0174 0F91      		pop r16
 968 0176 FF90      		pop r15
 969 0178 EF90      		pop r14
 970               	.LVL81:
 971 017a DF90      		pop r13
 972               	.LVL82:
 973 017c BF90      		pop r11
 974 017e AF90      		pop r10
 975               	.LVL83:
 976 0180 9F90      		pop r9
 977 0182 8F90      		pop r8
 978               	.LVL84:
 979 0184 0895      		ret
 980               		.cfi_endproc
 981               	.LFE1424:
 983               		.section	.text.mavlink_client,"ax",@progbits
 984               	.global	mavlink_client
 986               	mavlink_client:
 987               	.LFB1422:
 145:mavlink_interface.c **** 	mavlink_heart(targetAddress);
 988               		.loc 2 145 0
 989               		.cfi_startproc
 990               	.LVL85:
 991               	/* prologue: function */
 992               	/* frame size = 0 */
 993               	/* stack size = 0 */
 994               	.L__stack_usage = 0
 146:mavlink_interface.c **** }
 995               		.loc 2 146 0
 996 0000 0C94 0000 		jmp mavlink_heart
 997               	.LVL86:
 998               		.cfi_endproc
 999               	.LFE1422:
 1001               		.section	.bss.m_mavlink_status.2773,"aw",@nobits
 1004               	m_mavlink_status.2773:
 1005 0000 0000 0000 		.zero	11
 1005      0000 0000 
 1005      0000 00
 1006               		.section	.bss.m_mavlink_buffer.2777,"aw",@nobits
 1009               	m_mavlink_buffer.2777:
 1010 0000 0000 0000 		.zero	272
 1010      0000 0000 
 1010      0000 0000 
 1010      0000 0000 
 1010      0000 0000 
 1011               		.section	.rodata.mavlink_message_crcs.2822,"a",@progbits
 1014               	mavlink_message_crcs.2822:
 1015 0000 32        		.byte	50
 1016 0001 7C        		.byte	124
 1017 0002 89        		.byte	-119
 1018 0003 00        		.byte	0
 1019 0004 ED        		.byte	-19
 1020 0005 D9        		.byte	-39
 1021 0006 68        		.byte	104
 1022 0007 77        		.byte	119
 1023 0008 00        		.byte	0
 1024 0009 00        		.byte	0
 1025 000a 00        		.byte	0
 1026 000b 59        		.byte	89
 1027 000c 00        		.byte	0
 1028 000d 00        		.byte	0
 1029 000e 00        		.byte	0
 1030 000f 00        		.byte	0
 1031 0010 00        		.byte	0
 1032 0011 00        		.byte	0
 1033 0012 00        		.byte	0
 1034 0013 00        		.byte	0
 1035 0014 D6        		.byte	-42
 1036 0015 9F        		.byte	-97
 1037 0016 DC        		.byte	-36
 1038 0017 A8        		.byte	-88
 1039 0018 18        		.byte	24
 1040 0019 17        		.byte	23
 1041 001a AA        		.byte	-86
 1042 001b 90        		.byte	-112
 1043 001c 43        		.byte	67
 1044 001d 73        		.byte	115
 1045 001e 27        		.byte	39
 1046 001f F6        		.byte	-10
 1047 0020 B9        		.byte	-71
 1048 0021 68        		.byte	104
 1049 0022 ED        		.byte	-19
 1050 0023 F4        		.byte	-12
 1051 0024 DE        		.byte	-34
 1052 0025 D4        		.byte	-44
 1053 0026 09        		.byte	9
 1054 0027 FE        		.byte	-2
 1055 0028 E6        		.byte	-26
 1056 0029 1C        		.byte	28
 1057 002a 1C        		.byte	28
 1058 002b 84        		.byte	-124
 1059 002c DD        		.byte	-35
 1060 002d E8        		.byte	-24
 1061 002e 0B        		.byte	11
 1062 002f 99        		.byte	-103
 1063 0030 29        		.byte	41
 1064 0031 27        		.byte	39
 1065 0032 00        		.byte	0
 1066 0033 00        		.byte	0
 1067 0034 00        		.byte	0
 1068 0035 00        		.byte	0
 1069 0036 0F        		.byte	15
 1070 0037 03        		.byte	3
 1071 0038 00        		.byte	0
 1072 0039 00        		.byte	0
 1073 003a 00        		.byte	0
 1074 003b 00        		.byte	0
 1075 003c 00        		.byte	0
 1076 003d 99        		.byte	-103
 1077 003e B7        		.byte	-73
 1078 003f 33        		.byte	51
 1079 0040 52        		.byte	82
 1080 0041 76        		.byte	118
 1081 0042 94        		.byte	-108
 1082 0043 15        		.byte	21
 1083 0044 00        		.byte	0
 1084 0045 F3        		.byte	-13
 1085 0046 7C        		.byte	124
 1086 0047 00        		.byte	0
 1087 0048 00        		.byte	0
 1088 0049 26        		.byte	38
 1089 004a 14        		.byte	20
 1090 004b 9E        		.byte	-98
 1091 004c 98        		.byte	-104
 1092 004d 8F        		.byte	-113
 1093 004e 00        		.byte	0
 1094 004f 00        		.byte	0
 1095 0050 00        		.byte	0
 1096 0051 6A        		.byte	106
 1097 0052 31        		.byte	49
 1098 0053 16        		.byte	22
 1099 0054 8F        		.byte	-113
 1100 0055 8C        		.byte	-116
 1101 0056 05        		.byte	5
 1102 0057 96        		.byte	-106
 1103 0058 00        		.byte	0
 1104 0059 E7        		.byte	-25
 1105 005a B7        		.byte	-73
 1106 005b 3F        		.byte	63
 1107 005c 36        		.byte	54
 1108 005d 00        		.byte	0
 1109 005e 00        		.byte	0
 1110 005f 00        		.byte	0
 1111 0060 00        		.byte	0
 1112 0061 00        		.byte	0
 1113 0062 00        		.byte	0
 1114 0063 00        		.byte	0
 1115 0064 AF        		.byte	-81
 1116 0065 66        		.byte	102
 1117 0066 9E        		.byte	-98
 1118 0067 D0        		.byte	-48
 1119 0068 38        		.byte	56
 1120 0069 5D        		.byte	93
 1121 006a D3        		.byte	-45
 1122 006b 6C        		.byte	108
 1123 006c 20        		.byte	32
 1124 006d B9        		.byte	-71
 1125 006e 54        		.byte	84
 1126 006f 00        		.byte	0
 1127 0070 00        		.byte	0
 1128 0071 7C        		.byte	124
 1129 0072 77        		.byte	119
 1130 0073 04        		.byte	4
 1131 0074 4C        		.byte	76
 1132 0075 80        		.byte	-128
 1133 0076 38        		.byte	56
 1134 0077 74        		.byte	116
 1135 0078 86        		.byte	-122
 1136 0079 ED        		.byte	-19
 1137 007a CB        		.byte	-53
 1138 007b FA        		.byte	-6
 1139 007c 57        		.byte	87
 1140 007d CB        		.byte	-53
 1141 007e DC        		.byte	-36
 1142 007f 19        		.byte	25
 1143 0080 E2        		.byte	-30
 1144 0081 00        		.byte	0
 1145 0082 1D        		.byte	29
 1146 0083 DF        		.byte	-33
 1147 0084 55        		.byte	85
 1148 0085 06        		.byte	6
 1149 0086 E5        		.byte	-27
 1150 0087 CB        		.byte	-53
 1151 0088 01        		.byte	1
 1152 0089 00        		.byte	0
 1153 008a 00        		.byte	0
 1154 008b 00        		.byte	0
 1155 008c 00        		.byte	0
 1156 008d 00        		.byte	0
 1157 008e 00        		.byte	0
 1158 008f 00        		.byte	0
 1159 0090 00        		.byte	0
 1160 0091 00        		.byte	0
 1161 0092 00        		.byte	0
 1162 0093 9A        		.byte	-102
 1163 0094 31        		.byte	49
 1164 0095 00        		.byte	0
 1165 0096 00        		.byte	0
 1166 0097 00        		.byte	0
 1167 0098 00        		.byte	0
 1168 0099 00        		.byte	0
 1169 009a 00        		.byte	0
 1170 009b 00        		.byte	0
 1171 009c 00        		.byte	0
 1172 009d 00        		.byte	0
 1173 009e 00        		.byte	0
 1174 009f 00        		.byte	0
 1175 00a0 00        		.byte	0
 1176 00a1 00        		.byte	0
 1177 00a2 00        		.byte	0
 1178 00a3 00        		.byte	0
 1179 00a4 00        		.byte	0
 1180 00a5 00        		.byte	0
 1181 00a6 00        		.byte	0
 1182 00a7 00        		.byte	0
 1183 00a8 00        		.byte	0
 1184 00a9 00        		.byte	0
 1185 00aa 00        		.byte	0
 1186 00ab 00        		.byte	0
 1187 00ac 00        		.byte	0
 1188 00ad 00        		.byte	0
 1189 00ae 00        		.byte	0
 1190 00af 00        		.byte	0
 1191 00b0 00        		.byte	0
 1192 00b1 00        		.byte	0
 1193 00b2 00        		.byte	0
 1194 00b3 00        		.byte	0
 1195 00b4 00        		.byte	0
 1196 00b5 00        		.byte	0
 1197 00b6 00        		.byte	0
 1198 00b7 00        		.byte	0
 1199 00b8 00        		.byte	0
 1200 00b9 00        		.byte	0
 1201 00ba 00        		.byte	0
 1202 00bb 00        		.byte	0
 1203 00bc 00        		.byte	0
 1204 00bd 00        		.byte	0
 1205 00be 00        		.byte	0
 1206 00bf 00        		.byte	0
 1207 00c0 00        		.byte	0
 1208 00c1 00        		.byte	0
 1209 00c2 00        		.byte	0
 1210 00c3 00        		.byte	0
 1211 00c4 00        		.byte	0
 1212 00c5 00        		.byte	0
 1213 00c6 00        		.byte	0
 1214 00c7 00        		.byte	0
 1215 00c8 00        		.byte	0
 1216 00c9 00        		.byte	0
 1217 00ca 00        		.byte	0
 1218 00cb 00        		.byte	0
 1219 00cc 00        		.byte	0
 1220 00cd 00        		.byte	0
 1221 00ce 00        		.byte	0
 1222 00cf 00        		.byte	0
 1223 00d0 00        		.byte	0
 1224 00d1 00        		.byte	0
 1225 00d2 00        		.byte	0
 1226 00d3 00        		.byte	0
 1227 00d4 00        		.byte	0
 1228 00d5 00        		.byte	0
 1229 00d6 00        		.byte	0
 1230 00d7 00        		.byte	0
 1231 00d8 00        		.byte	0
 1232 00d9 00        		.byte	0
 1233 00da 00        		.byte	0
 1234 00db 00        		.byte	0
 1235 00dc 00        		.byte	0
 1236 00dd 00        		.byte	0
 1237 00de 00        		.byte	0
 1238 00df 00        		.byte	0
 1239 00e0 00        		.byte	0
 1240 00e1 00        		.byte	0
 1241 00e2 00        		.byte	0
 1242 00e3 00        		.byte	0
 1243 00e4 00        		.byte	0
 1244 00e5 00        		.byte	0
 1245 00e6 00        		.byte	0
 1246 00e7 00        		.byte	0
 1247 00e8 00        		.byte	0
 1248 00e9 00        		.byte	0
 1249 00ea 00        		.byte	0
 1250 00eb 00        		.byte	0
 1251 00ec 00        		.byte	0
 1252 00ed 00        		.byte	0
 1253 00ee 00        		.byte	0
 1254 00ef 00        		.byte	0
 1255 00f0 00        		.byte	0
 1256 00f1 00        		.byte	0
 1257 00f2 00        		.byte	0
 1258 00f3 00        		.byte	0
 1259 00f4 00        		.byte	0
 1260 00f5 00        		.byte	0
 1261 00f6 00        		.byte	0
 1262 00f7 00        		.byte	0
 1263 00f8 08        		.byte	8
 1264 00f9 CC        		.byte	-52
 1265 00fa 31        		.byte	49
 1266 00fb AA        		.byte	-86
 1267 00fc 2C        		.byte	44
 1268 00fd 53        		.byte	83
 1269 00fe 2E        		.byte	46
 1270 00ff 00        		.byte	0
 1271               	.global	system_state
 1272               		.section	.data.system_state,"aw",@progbits
 1275               	system_state:
 1276 0000 03        		.byte	3
 1277               	.global	custom_mode
 1278               		.section	.bss.custom_mode,"aw",@nobits
 1281               	custom_mode:
 1282 0000 0000 0000 		.zero	4
 1283               	.global	system_mode
 1284               		.section	.bss.system_mode,"aw",@nobits
 1287               	system_mode:
 1288 0000 00        		.zero	1
 1289               	.global	autopilot_type
 1290               		.section	.bss.autopilot_type,"aw",@nobits
 1293               	autopilot_type:
 1294 0000 00        		.zero	1
 1295               	.global	system_type
 1296               		.section	.data.system_type,"aw",@progbits
 1299               	system_type:
 1300 0000 03        		.byte	3
 1301               		.comm	mavlink_system,9,1
 1302               		.text
 1303               	.Letext0:
 1304               		.file 5 "h:\\toolswindows\\avr8-gnu-toolchain\\lib\\gcc\\avr\\4.9.2\\include\\stddef.h"
 1305               		.file 6 "h:\\toolswindows\\avr8-gnu-toolchain\\avr\\include\\stdint.h"
 1306               		.file 7 "../ChibiOS_16.1.4/os/nil/ports/AVR/compilers/GCC/niltypes.h"
 1307               		.file 8 "../ChibiOS_16.1.4/os/nil/include/nil.h"
 1308               		.file 9 "../ChibiOS_16.1.4/os/hal/osal/nil/osal.h"
 1309               		.file 10 "../ChibiOS_16.1.4/os/hal/include/hal_streams.h"
 1310               		.file 11 "../ChibiOS_16.1.4/os/hal/include/hal_queues.h"
 1311               		.file 12 "../ChibiOS_16.1.4/os/hal/include/serial.h"
 1312               		.file 13 "./mavlink/common/../mavlink_types.h"
 1313               		.file 14 "./mavlink/common/common.h"
 1314               		.file 15 "../RadioHead/chibios/RHReliableDatagram_wrapper.h"
 1315               		.file 16 "../ChibiOS_16.1.4/os/hal/ports/AVR/serial_lld.h"
DEFINED SYMBOLS
                            *ABS*:00000000 mavlink_interface.c
C:\Users\dei05446\AppData\Local\Temp\cclen04z.s:2      *ABS*:0000003e __SP_H__
C:\Users\dei05446\AppData\Local\Temp\cclen04z.s:3      *ABS*:0000003d __SP_L__
C:\Users\dei05446\AppData\Local\Temp\cclen04z.s:4      *ABS*:0000003f __SREG__
C:\Users\dei05446\AppData\Local\Temp\cclen04z.s:5      *ABS*:00000000 __tmp_reg__
C:\Users\dei05446\AppData\Local\Temp\cclen04z.s:6      *ABS*:00000001 __zero_reg__
C:\Users\dei05446\AppData\Local\Temp\cclen04z.s:12     .text.crc_accumulate:00000000 crc_accumulate
C:\Users\dei05446\AppData\Local\Temp\cclen04z.s:65     .text.print_raw:00000000 print_raw
C:\Users\dei05446\AppData\Local\Temp\cclen04z.s:128    .text.mavlink_reliable_send:00000000 mavlink_reliable_send
C:\Users\dei05446\AppData\Local\Temp\cclen04z.s:146    .text.mavlink_server:00000000 mavlink_server
C:\Users\dei05446\AppData\Local\Temp\cclen04z.s:1004   .bss.m_mavlink_status.2773:00000000 m_mavlink_status.2773
C:\Users\dei05446\AppData\Local\Temp\cclen04z.s:1009   .bss.m_mavlink_buffer.2777:00000000 m_mavlink_buffer.2777
C:\Users\dei05446\AppData\Local\Temp\cclen04z.s:1014   .rodata.mavlink_message_crcs.2822:00000000 mavlink_message_crcs.2822
C:\Users\dei05446\AppData\Local\Temp\cclen04z.s:661    .text.mavlink_heart:00000000 mavlink_heart
                            *COM*:00000009 mavlink_system
C:\Users\dei05446\AppData\Local\Temp\cclen04z.s:1275   .data.system_state:00000000 system_state
C:\Users\dei05446\AppData\Local\Temp\cclen04z.s:1287   .bss.system_mode:00000000 system_mode
C:\Users\dei05446\AppData\Local\Temp\cclen04z.s:1293   .bss.autopilot_type:00000000 autopilot_type
C:\Users\dei05446\AppData\Local\Temp\cclen04z.s:1299   .data.system_type:00000000 system_type
C:\Users\dei05446\AppData\Local\Temp\cclen04z.s:1281   .bss.custom_mode:00000000 custom_mode
C:\Users\dei05446\AppData\Local\Temp\cclen04z.s:986    .text.mavlink_client:00000000 mavlink_client

UNDEFINED SYMBOLS
SD1
chSequentialStreamPut
RHReliableDatagram_sendtoWait
RH_NRF24_maxMessageLength
RHReliableDatagram_available
RHReliableDatagram_recvfromAck
__tablejump2__
memcpy
__do_copy_data
__do_clear_bss
